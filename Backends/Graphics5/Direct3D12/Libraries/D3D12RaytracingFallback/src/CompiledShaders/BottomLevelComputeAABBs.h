#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer ConstructHierarchyConstants
; {
;
;   struct ConstructHierarchyConstants
;   {
;
;       struct struct.InputConstants
;       {
;
;           uint NumberOfElements;                    ; Offset:    0
;           uint UpdateFlags;                         ; Offset:    4
;       
;       } Constants                                   ; Offset:    0
;
;   
;   } ConstructHierarchyConstants                     ; Offset:    0 Size:     8
;
; }
;
; Resource bind info for hierarchyBuffer
; {
;
;   struct struct.HierarchyNode
;   {
;
;       uint ParentIndex;                             ; Offset:    0
;       uint LeftChildIndex;                          ; Offset:    4
;       uint RightChildIndex;                         ; Offset:    8
;   
;   } $Element;                                       ; Offset:    0 Size:    12
;
; }
;
; Resource bind info for aabbParentBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; ConstructHierarchyConstants       cbuffer      NA          NA     CB0            cb0     1
; outputBVH                             UAV    byte         r/w      U0             u0     1
; scratchMemory                         UAV    byte         r/w      U1             u1     1
; childNodesProcessedCounter            UAV    byte         r/w      U2             u2     1
; hierarchyBuffer                       UAV  struct         r/w      U3             u3     1
; aabbParentBuffer                      UAV  struct         r/w      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%struct.RWByteAddressBuffer = type { i32 }
%"class.RWStructuredBuffer<HierarchyNode>" = type { %struct.HierarchyNode }
%struct.HierarchyNode = type { i32, i32, i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%ConstructHierarchyConstants = type { %struct.InputConstants }
%struct.InputConstants = type { i32, i32 }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.BoundingBox = type { <3 x float>, <3 x float> }
%struct.AABB = type { <3 x float>, <3 x float> }

@"\01?outputBVH@@3URWByteAddressBuffer@@A" = external constant %struct.RWByteAddressBuffer, align 4
@"\01?scratchMemory@@3URWByteAddressBuffer@@A" = external constant %struct.RWByteAddressBuffer, align 4
@"\01?childNodesProcessedCounter@@3URWByteAddressBuffer@@A" = external constant %struct.RWByteAddressBuffer, align 4
@"\01?hierarchyBuffer@@3V?$RWStructuredBuffer@UHierarchyNode@@@@A" = external constant %"class.RWStructuredBuffer<HierarchyNode>", align 4
@"\01?aabbParentBuffer@@3V?$RWStructuredBuffer@I@@A" = external constant %"class.RWStructuredBuffer<unsigned int>", align 4
@ConstructHierarchyConstants = external constant %ConstructHierarchyConstants

define void @main() {
  %aabbParentBuffer_UAV_structbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 4, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %hierarchyBuffer_UAV_structbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %childNodesProcessedCounter_UAV_rawbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %scratchMemory_UAV_rawbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %outputBVH_UAV_rawbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %ConstructHierarchyConstants_cbuffer = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %2 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %ConstructHierarchyConstants_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3 = extractvalue %dx.types.CBufRet.i32 %2, 0
  %4 = add i32 %3, -1
  %5 = add i32 %4, %3
  %6 = icmp ult i32 %1, %3
  br i1 %6, label %7, label %.loopexit

; <label>:7                                       ; preds = %0
  %8 = shl i32 %1, 2
  %9 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %scratchMemory_UAV_rawbuf, i32 %8, i32 undef)  ; BufferLoad(srv,index,wot)
  %10 = extractvalue %dx.types.ResRet.i32 %9, 0
  %11 = icmp eq i32 %10, 9999999
  br i1 %11, label %.loopexit, label %12

; <label>:12                                      ; preds = %7
  %13 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 4, i32 undef)  ; BufferLoad(srv,index,wot)
  %14 = extractvalue %dx.types.ResRet.i32 %13, 0
  %15 = icmp ult i32 %10, %5
  br i1 %15, label %.backedge.preheader, label %.loopexit

.backedge.preheader:                              ; preds = %12
  br label %.backedge

.backedge:                                        ; preds = %.backedge.backedge, %.backedge.preheader
  %nodeIndex.0 = phi i32 [ %10, %.backedge.preheader ], [ %.043, %.backedge.backedge ]
  %numTriangles.0 = phi i32 [ 1, %.backedge.preheader ], [ %160, %.backedge.backedge ]
  %swapChildIndices.0 = phi i32 [ 0, %.backedge.preheader ], [ %159, %.backedge.backedge ]
  %16 = icmp ult i32 %nodeIndex.0, %4
  br i1 %16, label %58, label %17

; <label>:17                                      ; preds = %.backedge
  %18 = sub i32 %nodeIndex.0, %4
  %19 = mul i32 %18, 40
  %20 = add i32 %19, %14
  %21 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %20, i32 undef)  ; BufferLoad(srv,index,wot)
  %22 = extractvalue %dx.types.ResRet.i32 %21, 0
  %23 = add i32 %20, 4
  %24 = icmp eq i32 %22, 1
  br i1 %24, label %25, label %47

; <label>:25                                      ; preds = %17
  %26 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %23, i32 undef)  ; BufferLoad(srv,index,wot)
  %27 = extractvalue %dx.types.ResRet.i32 %26, 0
  %28 = extractvalue %dx.types.ResRet.i32 %26, 1
  %29 = extractvalue %dx.types.ResRet.i32 %26, 2
  %30 = add i32 %20, 16
  %31 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %30, i32 undef)  ; BufferLoad(srv,index,wot)
  %32 = extractvalue %dx.types.ResRet.i32 %31, 0
  %33 = extractvalue %dx.types.ResRet.i32 %31, 1
  %34 = extractvalue %dx.types.ResRet.i32 %31, 2
  %35 = add i32 %20, 28
  %36 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %35, i32 undef)  ; BufferLoad(srv,index,wot)
  %37 = extractvalue %dx.types.ResRet.i32 %36, 0
  %38 = extractvalue %dx.types.ResRet.i32 %36, 1
  %39 = extractvalue %dx.types.ResRet.i32 %36, 2
  %load30.cast = bitcast i32 %37 to float
  %load32.cast = bitcast i32 %38 to float
  %load34.cast = bitcast i32 %39 to float
  %40 = bitcast i32 %32 to float
  %41 = bitcast i32 %33 to float
  %42 = bitcast i32 %34 to float
  %43 = bitcast i32 %27 to float
  %44 = bitcast i32 %28 to float
  %45 = bitcast i32 %29 to float
  %FMin71 = call float @dx.op.binary.f32(i32 36, float %43, float %40)  ; FMin(a,b)
  %FMin72 = call float @dx.op.binary.f32(i32 36, float %44, float %41)  ; FMin(a,b)
  %FMin73 = call float @dx.op.binary.f32(i32 36, float %45, float %42)  ; FMin(a,b)
  %FMin68 = call float @dx.op.binary.f32(i32 36, float %FMin71, float %load30.cast)  ; FMin(a,b)
  %FMin69 = call float @dx.op.binary.f32(i32 36, float %FMin72, float %load32.cast)  ; FMin(a,b)
  %FMin70 = call float @dx.op.binary.f32(i32 36, float %FMin73, float %load34.cast)  ; FMin(a,b)
  %FMax65 = call float @dx.op.binary.f32(i32 35, float %43, float %40)  ; FMax(a,b)
  %FMax66 = call float @dx.op.binary.f32(i32 35, float %44, float %41)  ; FMax(a,b)
  %FMax67 = call float @dx.op.binary.f32(i32 35, float %45, float %42)  ; FMax(a,b)
  %FMax62 = call float @dx.op.binary.f32(i32 35, float %FMax65, float %load30.cast)  ; FMax(a,b)
  %FMax63 = call float @dx.op.binary.f32(i32 35, float %FMax66, float %load32.cast)  ; FMax(a,b)
  %FMax64 = call float @dx.op.binary.f32(i32 35, float %FMax67, float %load34.cast)  ; FMax(a,b)
  %.i0106 = fadd fast float %FMax62, 0xBF50624DE0000000
  %.i1107 = fadd fast float %FMax63, 0xBF50624DE0000000
  %.i2108 = fadd fast float %FMax64, 0xBF50624DE0000000
  %FMin59 = call float @dx.op.binary.f32(i32 36, float %FMin68, float %.i0106)  ; FMin(a,b)
  %FMin60 = call float @dx.op.binary.f32(i32 36, float %FMin69, float %.i1107)  ; FMin(a,b)
  %FMin61 = call float @dx.op.binary.f32(i32 36, float %FMin70, float %.i2108)  ; FMin(a,b)
  %.i0109 = fadd fast float %FMin59, %FMax62
  %.i1110 = fadd fast float %FMin60, %FMax63
  %.i2111 = fadd fast float %FMin61, %FMax64
  %.i0112 = fmul fast float %.i0109, 5.000000e-01
  %.i1113 = fmul fast float %.i1110, 5.000000e-01
  %.i2114 = fmul fast float %.i2111, 5.000000e-01
  %.i0115 = fsub fast float %FMax62, %.i0112
  %.i1116 = fsub fast float %FMax63, %.i1113
  %.i2117 = fsub fast float %FMax64, %.i2114
  %46 = or i32 %18, -2147483648
  br label %"\01?ComputeLeafAABB@@YA?AUBoundingBox@@IIAIAV?$vector@I$01@@@Z.exit"

; <label>:47                                      ; preds = %17
  %48 = or i32 %18, -1073741824
  %49 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %23, i32 undef)  ; BufferLoad(srv,index,wot)
  %50 = extractvalue %dx.types.ResRet.i32 %49, 0
  %51 = extractvalue %dx.types.ResRet.i32 %49, 1
  %52 = extractvalue %dx.types.ResRet.i32 %49, 2
  %.i0118 = bitcast i32 %50 to float
  %.i1119 = bitcast i32 %51 to float
  %.i2120 = bitcast i32 %52 to float
  %53 = add i32 %20, 16
  %54 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %53, i32 undef)  ; BufferLoad(srv,index,wot)
  %55 = extractvalue %dx.types.ResRet.i32 %54, 0
  %56 = extractvalue %dx.types.ResRet.i32 %54, 1
  %57 = extractvalue %dx.types.ResRet.i32 %54, 2
  %.i0121 = bitcast i32 %55 to float
  %.i1122 = bitcast i32 %56 to float
  %.i2123 = bitcast i32 %57 to float
  %.i0124 = fadd fast float %.i0121, %.i0118
  %.i1125 = fadd fast float %.i1122, %.i1119
  %.i2126 = fadd fast float %.i2123, %.i2120
  %.i0127 = fmul fast float %.i0124, 5.000000e-01
  %.i1128 = fmul fast float %.i1125, 5.000000e-01
  %.i2129 = fmul fast float %.i2126, 5.000000e-01
  %.i0130 = fsub fast float %.i0121, %.i0127
  %.i1131 = fsub fast float %.i1122, %.i1128
  %.i2132 = fsub fast float %.i2123, %.i2129
  br label %"\01?ComputeLeafAABB@@YA?AUBoundingBox@@IIAIAV?$vector@I$01@@@Z.exit"

; <label>:58                                      ; preds = %.backedge
  %59 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %ConstructHierarchyConstants_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %60 = extractvalue %dx.types.CBufRet.i32 %59, 1
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %70, label %63

; <label>:63                                      ; preds = %58
  %64 = shl i32 %nodeIndex.0, 5
  %65 = or i32 %64, 16
  %66 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %65, i32 undef)  ; BufferLoad(srv,index,wot)
  %67 = extractvalue %dx.types.ResRet.i32 %66, 3
  %68 = uitofp i32 %67 to float
  %.i0133 = fptoui float %68 to i32
  %69 = and i32 %.i0133, 16777215
  br label %"\01?GetLeftChildIndex@@YAII@Z.exit"

; <label>:70                                      ; preds = %58
  %71 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %hierarchyBuffer_UAV_structbuf, i32 %nodeIndex.0, i32 4)  ; BufferLoad(srv,index,wot)
  %72 = extractvalue %dx.types.ResRet.i32 %71, 0
  br label %"\01?GetLeftChildIndex@@YAII@Z.exit"

"\01?GetLeftChildIndex@@YAII@Z.exit":             ; preds = %70, %63
  %.041 = phi i32 [ %69, %63 ], [ %72, %70 ]
  br i1 %62, label %80, label %73

; <label>:73                                      ; preds = %"\01?GetLeftChildIndex@@YAII@Z.exit"
  %74 = shl i32 %nodeIndex.0, 5
  %75 = or i32 %74, 16
  %76 = add i32 %75, 16
  %77 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %76, i32 undef)  ; BufferLoad(srv,index,wot)
  %78 = extractvalue %dx.types.ResRet.i32 %77, 3
  %79 = uitofp i32 %78 to float
  %.i1136 = fptoui float %79 to i32
  br label %"\01?GetRightChildIndex@@YAII@Z.exit5"

; <label>:80                                      ; preds = %"\01?GetLeftChildIndex@@YAII@Z.exit"
  %81 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %hierarchyBuffer_UAV_structbuf, i32 %nodeIndex.0, i32 8)  ; BufferLoad(srv,index,wot)
  %82 = extractvalue %dx.types.ResRet.i32 %81, 0
  br label %"\01?GetRightChildIndex@@YAII@Z.exit5"

"\01?GetRightChildIndex@@YAII@Z.exit5":           ; preds = %80, %73
  %.042 = phi i32 [ %.i1136, %73 ], [ %82, %80 ]
  %83 = icmp ne i32 %swapChildIndices.0, 0
  %.042..041 = select i1 %83, i32 %.042, i32 %.041
  %.041..042 = select i1 %83, i32 %.041, i32 %.042
  %84 = shl i32 %.042..041, 5
  %85 = or i32 %84, 16
  %86 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %85, i32 undef)  ; BufferLoad(srv,index,wot)
  %87 = extractvalue %dx.types.ResRet.i32 %86, 0
  %88 = extractvalue %dx.types.ResRet.i32 %86, 1
  %89 = extractvalue %dx.types.ResRet.i32 %86, 2
  %90 = add i32 %85, 16
  %91 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %90, i32 undef)  ; BufferLoad(srv,index,wot)
  %92 = extractvalue %dx.types.ResRet.i32 %91, 0
  %93 = extractvalue %dx.types.ResRet.i32 %91, 1
  %94 = extractvalue %dx.types.ResRet.i32 %91, 2
  %95 = bitcast i32 %87 to float
  %96 = bitcast i32 %88 to float
  %97 = bitcast i32 %89 to float
  %98 = bitcast i32 %92 to float
  %99 = bitcast i32 %93 to float
  %100 = bitcast i32 %94 to float
  %101 = shl i32 %.041..042, 5
  %102 = or i32 %101, 16
  %103 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %102, i32 undef)  ; BufferLoad(srv,index,wot)
  %104 = extractvalue %dx.types.ResRet.i32 %103, 0
  %105 = extractvalue %dx.types.ResRet.i32 %103, 1
  %106 = extractvalue %dx.types.ResRet.i32 %103, 2
  %107 = add i32 %102, 16
  %108 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %107, i32 undef)  ; BufferLoad(srv,index,wot)
  %109 = extractvalue %dx.types.ResRet.i32 %108, 0
  %110 = extractvalue %dx.types.ResRet.i32 %108, 1
  %111 = extractvalue %dx.types.ResRet.i32 %108, 2
  %112 = bitcast i32 %104 to float
  %113 = bitcast i32 %105 to float
  %114 = bitcast i32 %106 to float
  %115 = bitcast i32 %109 to float
  %116 = bitcast i32 %110 to float
  %117 = bitcast i32 %111 to float
  %.i0137 = fsub fast float %112, %115
  %.i1138 = fsub fast float %113, %116
  %.i2139 = fsub fast float %114, %117
  %.i0140 = fsub fast float %95, %98
  %.i1141 = fsub fast float %96, %99
  %.i2142 = fsub fast float %97, %100
  %FMin = call float @dx.op.binary.f32(i32 36, float %.i0140, float %.i0137)  ; FMin(a,b)
  %FMin57 = call float @dx.op.binary.f32(i32 36, float %.i1141, float %.i1138)  ; FMin(a,b)
  %FMin58 = call float @dx.op.binary.f32(i32 36, float %.i2142, float %.i2139)  ; FMin(a,b)
  %.i0143 = fadd fast float %115, %112
  %.i1144 = fadd fast float %116, %113
  %.i2145 = fadd fast float %117, %114
  %.i0146 = fadd fast float %98, %95
  %.i1147 = fadd fast float %99, %96
  %.i2148 = fadd fast float %100, %97
  %FMax = call float @dx.op.binary.f32(i32 35, float %.i0146, float %.i0143)  ; FMax(a,b)
  %FMax55 = call float @dx.op.binary.f32(i32 35, float %.i1147, float %.i1144)  ; FMax(a,b)
  %FMax56 = call float @dx.op.binary.f32(i32 35, float %.i2148, float %.i2145)  ; FMax(a,b)
  %.i0149 = fadd fast float %FMax, %FMin
  %.i1150 = fadd fast float %FMax55, %FMin57
  %.i2151 = fadd fast float %FMax56, %FMin58
  %.i0152 = fmul fast float %.i0149, 5.000000e-01
  %.i1153 = fmul fast float %.i1150, 5.000000e-01
  %.i2154 = fmul fast float %.i2151, 5.000000e-01
  %.i0155 = fsub fast float %FMax, %.i0152
  %.i1156 = fsub fast float %FMax55, %.i1153
  %.i2157 = fsub fast float %FMax56, %.i2154
  %118 = and i32 %.042..041, 16777215
  br label %"\01?ComputeLeafAABB@@YA?AUBoundingBox@@IIAIAV?$vector@I$01@@@Z.exit"

"\01?ComputeLeafAABB@@YA?AUBoundingBox@@IIAIAV?$vector@I$01@@@Z.exit": ; preds = %"\01?GetRightChildIndex@@YAII@Z.exit5", %47, %25
  %boxData.1.0.i0 = phi float [ %.i0155, %"\01?GetRightChildIndex@@YAII@Z.exit5" ], [ %.i0115, %25 ], [ %.i0130, %47 ]
  %boxData.1.0.i1 = phi float [ %.i1156, %"\01?GetRightChildIndex@@YAII@Z.exit5" ], [ %.i1116, %25 ], [ %.i1131, %47 ]
  %boxData.1.0.i2 = phi float [ %.i2157, %"\01?GetRightChildIndex@@YAII@Z.exit5" ], [ %.i2117, %25 ], [ %.i2132, %47 ]
  %boxData.0.0.i0 = phi float [ %.i0152, %"\01?GetRightChildIndex@@YAII@Z.exit5" ], [ %.i0112, %25 ], [ %.i0127, %47 ]
  %boxData.0.0.i1 = phi float [ %.i1153, %"\01?GetRightChildIndex@@YAII@Z.exit5" ], [ %.i1113, %25 ], [ %.i1128, %47 ]
  %boxData.0.0.i2 = phi float [ %.i2154, %"\01?GetRightChildIndex@@YAII@Z.exit5" ], [ %.i2114, %25 ], [ %.i2129, %47 ]
  %outputFlag.0.i0 = phi i32 [ %118, %"\01?GetRightChildIndex@@YAII@Z.exit5" ], [ %46, %25 ], [ %48, %47 ]
  %outputFlag.0.i1 = phi i32 [ %.041..042, %"\01?GetRightChildIndex@@YAII@Z.exit5" ], [ 1, %25 ], [ 1, %47 ]
  %119 = shl i32 %nodeIndex.0, 5
  %120 = or i32 %119, 16
  %121 = bitcast float %boxData.0.0.i0 to i32
  %122 = bitcast float %boxData.0.0.i1 to i32
  %123 = bitcast float %boxData.0.0.i2 to i32
  %124 = bitcast float %boxData.1.0.i0 to i32
  %125 = bitcast float %boxData.1.0.i1 to i32
  %126 = bitcast float %boxData.1.0.i2 to i32
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %120, i32 undef, i32 %121, i32 %122, i32 %123, i32 %outputFlag.0.i0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %127 = add i32 %120, 16
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %127, i32 undef, i32 %124, i32 %125, i32 %126, i32 %outputFlag.0.i1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %128 = icmp eq i32 %nodeIndex.0, 0
  br i1 %128, label %.loopexit.loopexit, label %129

; <label>:129                                     ; preds = %"\01?ComputeLeafAABB@@YA?AUBoundingBox@@IIAIAV?$vector@I$01@@@Z.exit"
  %130 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %ConstructHierarchyConstants_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.i32 %130, 1
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %137, label %134

; <label>:134                                     ; preds = %129
  %135 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %aabbParentBuffer_UAV_structbuf, i32 %nodeIndex.0, i32 0)  ; BufferLoad(srv,index,wot)
  %136 = extractvalue %dx.types.ResRet.i32 %135, 0
  br label %"\01?GetParentIndex@@YAII@Z.exit"

; <label>:137                                     ; preds = %129
  %138 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %hierarchyBuffer_UAV_structbuf, i32 %nodeIndex.0, i32 0)  ; BufferLoad(srv,index,wot)
  %139 = extractvalue %dx.types.ResRet.i32 %138, 0
  %140 = and i32 %139, 2147483647
  br label %"\01?GetParentIndex@@YAII@Z.exit"

"\01?GetParentIndex@@YAII@Z.exit":                ; preds = %137, %134
  %.043 = phi i32 [ %136, %134 ], [ %140, %137 ]
  %141 = shl i32 %.043, 2
  %AtomicAdd = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %childNodesProcessedCounter_UAV_rawbuf, i32 0, i32 %141, i32 undef, i32 undef, i32 %numTriangles.0)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %142 = icmp eq i32 %AtomicAdd, 0
  br i1 %142, label %.loopexit.loopexit, label %143

; <label>:143                                     ; preds = %"\01?GetParentIndex@@YAII@Z.exit"
  %144 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %ConstructHierarchyConstants_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %145 = extractvalue %dx.types.CBufRet.i32 %144, 1
  %146 = and i32 %145, 2
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %155, label %148

; <label>:148                                     ; preds = %143
  %149 = shl i32 %.043, 5
  %150 = or i32 %149, 16
  %151 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %150, i32 undef)  ; BufferLoad(srv,index,wot)
  %152 = extractvalue %dx.types.ResRet.i32 %151, 3
  %153 = uitofp i32 %152 to float
  %.i0160 = fptoui float %153 to i32
  %154 = and i32 %.i0160, 16777215
  br label %"\01?GetLeftChildIndex@@YAII@Z.exit16"

; <label>:155                                     ; preds = %143
  %156 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %hierarchyBuffer_UAV_structbuf, i32 %.043, i32 4)  ; BufferLoad(srv,index,wot)
  %157 = extractvalue %dx.types.ResRet.i32 %156, 0
  br label %"\01?GetLeftChildIndex@@YAII@Z.exit16"

"\01?GetLeftChildIndex@@YAII@Z.exit16":           ; preds = %155, %148
  %.044 = phi i32 [ %154, %148 ], [ %157, %155 ]
  %158 = icmp ugt i32 %numTriangles.0, %AtomicAdd
  %not. = icmp ne i32 %.044, %nodeIndex.0
  %. = xor i1 %158, %not.
  %159 = zext i1 %. to i32
  %160 = add i32 %AtomicAdd, %numTriangles.0
  %161 = and i32 %145, 1
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %.backedge.backedge, label %163

; <label>:163                                     ; preds = %"\01?GetLeftChildIndex@@YAII@Z.exit16"
  br i1 %147, label %171, label %164

; <label>:164                                     ; preds = %163
  %165 = shl i32 %.043, 5
  %166 = or i32 %165, 16
  %167 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %166, i32 undef)  ; BufferLoad(srv,index,wot)
  %168 = extractvalue %dx.types.ResRet.i32 %167, 3
  %169 = uitofp i32 %168 to float
  %.i0162 = fptoui float %169 to i32
  %170 = and i32 %.i0162, 16777215
  br label %"\01?GetLeftChildIndex@@YAII@Z.exit19"

; <label>:171                                     ; preds = %163
  %172 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %hierarchyBuffer_UAV_structbuf, i32 %.043, i32 4)  ; BufferLoad(srv,index,wot)
  %173 = extractvalue %dx.types.ResRet.i32 %172, 0
  br label %"\01?GetLeftChildIndex@@YAII@Z.exit19"

"\01?GetLeftChildIndex@@YAII@Z.exit19":           ; preds = %171, %164
  %.045 = phi i32 [ %170, %164 ], [ %173, %171 ]
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %aabbParentBuffer_UAV_structbuf, i32 %.045, i32 0, i32 %.043, i32 undef, i32 undef, i32 undef, i8 1)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %174 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %ConstructHierarchyConstants_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %175 = extractvalue %dx.types.CBufRet.i32 %174, 1
  %176 = and i32 %175, 2
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %185, label %178

; <label>:178                                     ; preds = %"\01?GetLeftChildIndex@@YAII@Z.exit19"
  %179 = shl i32 %.043, 5
  %180 = or i32 %179, 16
  %181 = add i32 %180, 16
  %182 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %outputBVH_UAV_rawbuf, i32 %181, i32 undef)  ; BufferLoad(srv,index,wot)
  %183 = extractvalue %dx.types.ResRet.i32 %182, 3
  %184 = uitofp i32 %183 to float
  %.i1165 = fptoui float %184 to i32
  br label %"\01?GetRightChildIndex@@YAII@Z.exit"

; <label>:185                                     ; preds = %"\01?GetLeftChildIndex@@YAII@Z.exit19"
  %186 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %hierarchyBuffer_UAV_structbuf, i32 %.043, i32 8)  ; BufferLoad(srv,index,wot)
  %187 = extractvalue %dx.types.ResRet.i32 %186, 0
  br label %"\01?GetRightChildIndex@@YAII@Z.exit"

"\01?GetRightChildIndex@@YAII@Z.exit":            ; preds = %185, %178
  %.040 = phi i32 [ %.i1165, %178 ], [ %187, %185 ]
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %aabbParentBuffer_UAV_structbuf, i32 %.040, i32 0, i32 %.043, i32 undef, i32 undef, i32 undef, i8 1)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %.backedge.backedge

.backedge.backedge:                               ; preds = %"\01?GetRightChildIndex@@YAII@Z.exit", %"\01?GetLeftChildIndex@@YAII@Z.exit16"
  br label %.backedge

.loopexit.loopexit:                               ; preds = %"\01?GetParentIndex@@YAII@Z.exit", %"\01?ComputeLeafAABB@@YA?AUBoundingBox@@IIAIAV?$vector@I$01@@@Z.exit"
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %12, %7, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!15, !37}
!dx.entryPoints = !{!41}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 3}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{null, !5, !13, null}
!5 = !{!6, !7, !8, !9, !11}
!6 = !{i32 0, %struct.RWByteAddressBuffer* undef, !"outputBVH", i32 0, i32 0, i32 1, i32 11, i1 true, i1 false, i1 false, null}
!7 = !{i32 1, %struct.RWByteAddressBuffer* undef, !"scratchMemory", i32 0, i32 1, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!8 = !{i32 2, %struct.RWByteAddressBuffer* undef, !"childNodesProcessedCounter", i32 0, i32 2, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!9 = !{i32 3, %"class.RWStructuredBuffer<HierarchyNode>"* undef, !"hierarchyBuffer", i32 0, i32 3, i32 1, i32 12, i1 false, i1 false, i1 false, !10}
!10 = !{i32 1, i32 12}
!11 = !{i32 4, %"class.RWStructuredBuffer<unsigned int>"* undef, !"aabbParentBuffer", i32 0, i32 4, i32 1, i32 12, i1 false, i1 false, i1 false, !12}
!12 = !{i32 1, i32 4}
!13 = !{!14}
!14 = !{i32 0, %ConstructHierarchyConstants* undef, !"ConstructHierarchyConstants", i32 0, i32 0, i32 1, i32 8, null}
!15 = !{i32 0, %struct.RWByteAddressBuffer undef, !16, %"class.RWStructuredBuffer<HierarchyNode>" undef, !18, %struct.HierarchyNode undef, !20, %"class.RWStructuredBuffer<unsigned int>" undef, !24, %struct.InputConstants undef, !26, %struct.BoundingBox undef, !29, %struct.AABB undef, !32, %ConstructHierarchyConstants undef, !35}
!16 = !{i32 4, !17}
!17 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 4}
!18 = !{i32 12, !19}
!19 = !{i32 6, !"h", i32 3, i32 0}
!20 = !{i32 12, !21, !22, !23}
!21 = !{i32 6, !"ParentIndex", i32 3, i32 0, i32 7, i32 5}
!22 = !{i32 6, !"LeftChildIndex", i32 3, i32 4, i32 7, i32 5}
!23 = !{i32 6, !"RightChildIndex", i32 3, i32 8, i32 7, i32 5}
!24 = !{i32 4, !25}
!25 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 5}
!26 = !{i32 8, !27, !28}
!27 = !{i32 6, !"NumberOfElements", i32 3, i32 0, i32 7, i32 5}
!28 = !{i32 6, !"UpdateFlags", i32 3, i32 4, i32 7, i32 5}
!29 = !{i32 28, !30, !31}
!30 = !{i32 6, !"center", i32 3, i32 0, i32 7, i32 9}
!31 = !{i32 6, !"halfDim", i32 3, i32 16, i32 7, i32 9}
!32 = !{i32 28, !33, !34}
!33 = !{i32 6, !"min", i32 3, i32 0, i32 7, i32 9}
!34 = !{i32 6, !"max", i32 3, i32 16, i32 7, i32 9}
!35 = !{i32 8, !36}
!36 = !{i32 6, !"Constants", i32 3, i32 0}
!37 = !{i32 1, void ()* @main, !38}
!38 = !{!39}
!39 = !{i32 0, !40, !40}
!40 = !{}
!41 = !{void ()* @main, !"main", null, !4, !42}
!42 = !{i32 0, i64 16, i32 4, !43}
!43 = !{i32 64, i32 1, i32 1}

#endif

const unsigned char g_pBottomLevelComputeAABBs[] = {
  0x44, 0x58, 0x42, 0x43, 0x81, 0xf6, 0x3f, 0x3b, 0xd3, 0x1b, 0xf7, 0x5f,
  0x9e, 0xf3, 0x29, 0xf8, 0xf8, 0x02, 0x7e, 0x8c, 0x01, 0x00, 0x00, 0x00,
  0x40, 0x17, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x08, 0x01, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x9c, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x30, 0x16, 0x00, 0x00, 0x60, 0x00, 0x05, 0x00,
  0x8c, 0x05, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x18, 0x16, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x83, 0x05, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0x01, 0x90, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0xa4, 0xc1, 0x1c, 0x01, 0x18, 0x9c, 0x26, 0x4d, 0x11, 0x25, 0x4c,
  0xfe, 0x0a, 0x6f, 0xd8, 0x44, 0x68, 0xc3, 0x10, 0x11, 0x92, 0xb4, 0x51,
  0x45, 0x41, 0x44, 0x28, 0x00, 0x28, 0x38, 0x4a, 0x9a, 0x22, 0x4a, 0x98,
  0xfc, 0x10, 0x21, 0x22, 0x20, 0x12, 0x0e, 0xec, 0x74, 0x06, 0x02, 0x0d,
  0x00, 0x00, 0xcc, 0x74, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3,
  0xe0, 0x06, 0xb2, 0x70, 0x0b, 0xb3, 0x40, 0x0f, 0xf2, 0x50, 0x0f, 0xe3,
  0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x40, 0x0e, 0xa2, 0x50, 0x0f, 0xe6,
  0x60, 0x0e, 0xe5, 0x20, 0x0f, 0x7c, 0x80, 0x0a, 0xe9, 0x50, 0x0e, 0xf2,
  0x10, 0x0e, 0xf2, 0x30, 0x0e, 0xe8, 0x90, 0x0f, 0xae, 0xf0, 0x0e, 0xe4,
  0x50, 0x0e, 0x7e, 0x80, 0x82, 0x81, 0x88, 0x99, 0xcc, 0x60, 0x1c, 0xd8,
  0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x40, 0x16, 0x6e, 0x61, 0x16, 0xe8,
  0x41, 0x1e, 0xea, 0x61, 0x1c, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xc8,
  0x41, 0x14, 0xea, 0xc1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0x81, 0x0f, 0xea,
  0xc1, 0x1d, 0xe6, 0x21, 0x1d, 0xce, 0xc1, 0x1d, 0xca, 0x81, 0x1c, 0xc0,
  0x20, 0x1d, 0xdc, 0x81, 0x1e, 0xfc, 0x00, 0x05, 0x00, 0x19, 0x57, 0x49,
  0x53, 0x44, 0x09, 0x93, 0x2f, 0x36, 0x0f, 0x35, 0x71, 0x4e, 0x23, 0x4d,
  0x40, 0x33, 0x49, 0x48, 0x00, 0x80, 0xdb, 0x38, 0xa7, 0x91, 0xa6, 0x88,
  0x12, 0xa6, 0x10, 0x21, 0x22, 0x20, 0x12, 0x0e, 0x8c, 0x73, 0x1a, 0x69,
  0x02, 0x9a, 0x49, 0x42, 0x01, 0x42, 0xc9, 0x08, 0x40, 0x09, 0x16, 0x62,
  0xca, 0x00, 0x00, 0x00, 0x39, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc8, 0x6d, 0x23, 0x02, 0x00,
  0x00, 0x60, 0x8e, 0x00, 0xa1, 0xe8, 0x9e, 0xe1, 0xf2, 0x27, 0xec, 0x21,
  0x24, 0x3f, 0x04, 0x9a, 0x61, 0x21, 0x50, 0x20, 0x15, 0x02, 0x02, 0x26,
  0x80, 0xa8, 0x82, 0x00, 0xc0, 0x04, 0x00, 0x00, 0x00, 0x90, 0x35, 0x03,
  0x50, 0x08, 0x0c, 0xc0, 0x30, 0xca, 0xe6, 0x08, 0x82, 0x62, 0x4c, 0x40,
  0x04, 0x00, 0x1b, 0x71, 0x37, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9,
  0x2b, 0x21, 0xad, 0xc4, 0xe4, 0x23, 0xb7, 0x8d, 0x0a, 0x00, 0x00, 0x00,
  0xa0, 0x14, 0x1e, 0x30, 0x01, 0x00, 0x7d, 0x45, 0x59, 0x80, 0x09, 0x00,
  0x00, 0x00, 0x00, 0x22, 0x0a, 0x07, 0x02, 0x86, 0x11, 0x06, 0xec, 0x24,
  0x69, 0x8a, 0x28, 0x61, 0xf2, 0x37, 0x87, 0x6a, 0x06, 0xa4, 0x31, 0x36,
  0xe7, 0x42, 0x02, 0x49, 0xde, 0x22, 0x4d, 0x11, 0x25, 0x4c, 0xbe, 0xa6,
  0x6d, 0x1b, 0x12, 0x48, 0x72, 0x8e, 0x00, 0x14, 0xa6, 0x00, 0x00, 0x00,
  0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e,
  0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07,
  0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07,
  0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x3a, 0x0f, 0x84, 0x90, 0x21, 0x23,
  0x45, 0x44, 0x00, 0xc6, 0x00, 0x80, 0x19, 0x03, 0x00, 0x66, 0x0c, 0x00,
  0x98, 0x34, 0x00, 0x60, 0xda, 0x00, 0x80, 0x99, 0x03, 0x00, 0x18, 0xf2,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
  0xe4, 0x71, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x43, 0x01, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0xc7, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x4f, 0x06, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x0e, 0x08, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x1f, 0x10, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0xc2, 0x00, 0x08, 0x80,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb2, 0x40, 0x00, 0x00,
  0x16, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x02, 0x4a, 0x60, 0x04, 0xa0,
  0x0c, 0x8a, 0xa1, 0x2c, 0x8a, 0xa0, 0x30, 0x0a, 0xa1, 0x20, 0xca, 0xa1,
  0x14, 0x0a, 0xa7, 0x24, 0x0a, 0xa4, 0x00, 0x03, 0xe8, 0x2c, 0x10, 0xda,
  0x46, 0x00, 0x6a, 0x80, 0x88, 0x19, 0x00, 0x2a, 0x66, 0x00, 0xc8, 0x98,
  0x01, 0xa0, 0x63, 0x06, 0x80, 0x90, 0x19, 0x00, 0x4a, 0x66, 0x00, 0x48,
  0x99, 0x01, 0xa0, 0x61, 0x06, 0x80, 0x84, 0x19, 0x00, 0x2a, 0x67, 0x00,
  0xc8, 0x9c, 0x01, 0xa0, 0x60, 0x06, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0xc6, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x83, 0x0c, 0x6f, 0x0c, 0x24, 0xc6, 0x45, 0x66, 0x43, 0x10, 0x4c, 0x10,
  0x00, 0x67, 0x82, 0x00, 0x3c, 0x1b, 0x84, 0x81, 0x98, 0x20, 0x00, 0xd0,
  0x06, 0x61, 0x30, 0x28, 0x8c, 0xcd, 0x4d, 0x10, 0x80, 0x68, 0xc3, 0x80,
  0x24, 0xc4, 0x04, 0x41, 0x40, 0x03, 0x26, 0x6f, 0x75, 0x74, 0x70, 0x75,
  0x74, 0x42, 0x56, 0x48, 0x13, 0x04, 0x40, 0x9a, 0x20, 0x6c, 0xdf, 0x04,
  0x61, 0xf3, 0x36, 0x2c, 0xc4, 0xc2, 0x10, 0xc4, 0xd0, 0x38, 0xcf, 0x03,
  0xb0, 0x99, 0x1b, 0x93, 0x0b, 0xa3, 0x1b, 0x43, 0x6b, 0x2a, 0x6b, 0x7b,
  0x93, 0xcb, 0xdb, 0xb0, 0x0c, 0x4b, 0x44, 0x0c, 0x43, 0xf3, 0x3c, 0x0f,
  0x30, 0x41, 0x00, 0x26, 0x6a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x6f,
  0x64, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
  0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x1b, 0x96, 0x69, 0xa1, 0x88,
  0x69, 0x68, 0x9e, 0xe7, 0x01, 0x26, 0x08, 0x45, 0x18, 0xf0, 0x41, 0x4b,
  0x2b, 0x93, 0x0b, 0x93, 0x1b, 0x43, 0xcb, 0x13, 0xaa, 0x33, 0x33, 0x2b,
  0x93, 0x9b, 0x20, 0x00, 0xd4, 0x06, 0x61, 0xc0, 0x36, 0x2c, 0x86, 0x75,
  0x11, 0xc6, 0x80, 0x3d, 0xcf, 0x93, 0x4d, 0x10, 0x80, 0x6a, 0x82, 0x70,
  0x8c, 0x01, 0xa1, 0xb0, 0x30, 0x31, 0x31, 0xa8, 0x30, 0xb9, 0x32, 0x37,
  0x3a, 0xa1, 0x3a, 0x33, 0xb3, 0x32, 0xb9, 0x0d, 0xc2, 0xb0, 0x6d, 0x58,
  0x36, 0xae, 0x23, 0xb6, 0x01, 0x7b, 0x9e, 0xc7, 0xdb, 0x50, 0x40, 0x52,
  0xa5, 0x7d, 0x13, 0x04, 0xc5, 0x0c, 0xb8, 0x0d, 0xbd, 0xb9, 0xcd, 0xd1,
  0xc9, 0xd5, 0x8d, 0xd1, 0x21, 0xa5, 0x95, 0xc9, 0x85, 0xc9, 0x8d, 0xa1,
  0xe5, 0x0d, 0xbd, 0xb9, 0xcd, 0xd1, 0x85, 0xb9, 0xd1, 0xcd, 0x4d, 0x10,
  0x00, 0x6b, 0x03, 0x42, 0x84, 0x81, 0x18, 0x10, 0xc4, 0x30, 0x06, 0xc0,
  0x86, 0x80, 0x0c, 0x36, 0x10, 0x00, 0x18, 0x94, 0x01, 0x30, 0x41, 0x08,
  0xd6, 0x80, 0x01, 0xda, 0x04, 0x01, 0xb8, 0x36, 0x18, 0x09, 0x1a, 0x18,
  0x44, 0x1a, 0x6c, 0x1b, 0x84, 0x4d, 0x0d, 0x26, 0x08, 0x04, 0x18, 0x6c,
  0x20, 0x12, 0x34, 0x30, 0x88, 0x0d, 0x02, 0xd6, 0x06, 0x13, 0x84, 0xe1,
  0x0c, 0xb8, 0x40, 0x85, 0xc9, 0x95, 0xb9, 0xd1, 0x25, 0xb9, 0x91, 0x95,
  0xe1, 0x4d, 0x10, 0x00, 0x6c, 0x83, 0x91, 0xc0, 0x81, 0x41, 0xa4, 0x41,
  0x1c, 0xd0, 0x61, 0x2a, 0x33, 0xa3, 0x1b, 0x42, 0x4b, 0x63, 0x23, 0x4b,
  0x72, 0x23, 0x2b, 0xc3, 0xdb, 0x60, 0x24, 0x73, 0x60, 0x6c, 0x69, 0x10,
  0x07, 0x7c, 0xa4, 0xd2, 0xce, 0xd0, 0xe8, 0x86, 0xd0, 0xd2, 0xd8, 0xc8,
  0x92, 0xdc, 0xc8, 0xca, 0xf0, 0x36, 0x18, 0x49, 0x1d, 0x18, 0x63, 0x90,
  0x06, 0x71, 0xb0, 0x81, 0xc0, 0xe4, 0x80, 0x0e, 0xec, 0x60, 0x82, 0x60,
  0x88, 0xc1, 0x06, 0x23, 0x41, 0x03, 0x83, 0x48, 0x83, 0x38, 0xd8, 0x20,
  0x6c, 0x79, 0x30, 0x41, 0x40, 0xc8, 0x80, 0x90, 0x53, 0x5d, 0x9b, 0x58,
  0x99, 0xdc, 0x93, 0x59, 0x11, 0x5b, 0x59, 0x5b, 0x99, 0x1b, 0xdd, 0xdc,
  0x06, 0x23, 0xe1, 0x03, 0x83, 0x48, 0x83, 0x38, 0xe0, 0x52, 0x05, 0x47,
  0x16, 0x46, 0x57, 0x66, 0xc4, 0x16, 0x76, 0x36, 0xb7, 0xc1, 0x48, 0xfc,
  0xc0, 0xd8, 0xd2, 0x20, 0x0e, 0x36, 0x0c, 0x63, 0xd0, 0x07, 0x7f, 0x30,
  0x41, 0x28, 0x83, 0x34, 0x98, 0x20, 0x00, 0x19, 0x8d, 0xb1, 0x32, 0x37,
  0xba, 0x32, 0xb9, 0x09, 0x02, 0xa0, 0x6d, 0x30, 0x92, 0x51, 0x30, 0x88,
  0x34, 0x20, 0x05, 0x1e, 0x68, 0x61, 0x6c, 0x66, 0x44, 0x69, 0x6d, 0x13,
  0x04, 0x60, 0xdb, 0x60, 0x24, 0xa6, 0x60, 0x9c, 0x42, 0x1a, 0x90, 0xc2,
  0x86, 0x41, 0x14, 0x4a, 0x01, 0x15, 0x26, 0x08, 0x66, 0xa0, 0x06, 0x1c,
  0xda, 0xd2, 0xdc, 0x36, 0x18, 0xc9, 0x2a, 0x18, 0x44, 0x1a, 0x90, 0x02,
  0x87, 0xb6, 0x30, 0xbc, 0x0d, 0x46, 0xd2, 0x0a, 0xc6, 0x29, 0xa4, 0x01,
  0x29, 0x6c, 0x18, 0x44, 0x81, 0x15, 0x5c, 0x61, 0x82, 0x90, 0x94, 0x01,
  0x93, 0xa1, 0x37, 0xb7, 0x39, 0xba, 0x30, 0x37, 0xba, 0xb9, 0x0d, 0x44,
  0x12, 0x0b, 0x06, 0xb1, 0x41, 0x18, 0x03, 0x59, 0xd8, 0x10, 0x11, 0x67,
  0xb0, 0x06, 0x6c, 0xe0, 0x06, 0x6f, 0x70, 0x07, 0x78, 0xa0, 0x07, 0x7b,
  0x00, 0x0a, 0xa1, 0x90, 0x0a, 0xaa, 0xf0, 0x0a, 0xb0, 0x30, 0x0b, 0x13,
  0x84, 0xc6, 0xd8, 0x00, 0x6c, 0x18, 0x08, 0x5b, 0xb0, 0x85, 0x0d, 0xc1,
  0x2d, 0x6c, 0x18, 0x86, 0x5a, 0xc0, 0x05, 0x12, 0x6d, 0x61, 0x69, 0x6e,
  0x13, 0x84, 0x33, 0xe8, 0x26, 0x08, 0x00, 0xb7, 0x61, 0xe0, 0x85, 0x61,
  0xd8, 0x40, 0x10, 0xbb, 0xb0, 0xf5, 0xc2, 0x86, 0xa2, 0x16, 0x74, 0x01,
  0x30, 0x03, 0x5f, 0xa8, 0xc2, 0xc6, 0x66, 0xd7, 0xe6, 0x92, 0x46, 0x56,
  0xe6, 0x46, 0x37, 0x25, 0x08, 0xaa, 0x90, 0xe1, 0xb9, 0xd8, 0x95, 0xc9,
  0xcd, 0xa5, 0xbd, 0xb9, 0x4d, 0x09, 0x88, 0x26, 0x64, 0x78, 0x2e, 0x76,
  0x61, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x02, 0xa3, 0x0e, 0x19, 0x9e, 0xcb,
  0x1c, 0x5a, 0x18, 0x59, 0x99, 0x5c, 0xd3, 0x1b, 0x59, 0x19, 0xdb, 0x94,
  0x20, 0x29, 0x43, 0x86, 0xe7, 0x22, 0x57, 0x36, 0xf7, 0x56, 0x27, 0x37,
  0x56, 0x36, 0x37, 0x25, 0x28, 0x83, 0x4a, 0x64, 0x78, 0x2e, 0x74, 0x79,
  0x70, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
  0x73, 0x53, 0x84, 0x59, 0xc0, 0x85, 0x3a, 0x64, 0x78, 0x2e, 0x65, 0x6e,
  0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x02, 0x5f,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc5,
  0x61, 0x07, 0x76, 0xb0, 0x87, 0x76, 0x70, 0x03, 0x76, 0x78, 0x87, 0x77,
  0x80, 0x87, 0x19, 0xd9, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe8, 0xc0, 0x0e,
  0x6e, 0x20, 0x0f, 0xe5, 0x30, 0x0f, 0xef, 0x50, 0x0f, 0xf2, 0x30, 0x0e,
  0xe5, 0xe0, 0x06, 0xe1, 0x40, 0x0f, 0xf4, 0x20, 0x0f, 0xe9, 0x20, 0x0e,
  0xf5, 0x40, 0x0f, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x5e, 0x00, 0x00, 0x00, 0x25, 0x60, 0x07, 0x81, 0xdf, 0x18, 0x9d, 0x66,
  0x93, 0x9d, 0x6f, 0x72, 0x79, 0x0e, 0x95, 0xbf, 0xc7, 0xe5, 0xf9, 0xbc,
  0x4c, 0x1e, 0xbe, 0xeb, 0x6e, 0x7a, 0x59, 0x0e, 0x04, 0xce, 0xaa, 0xd2,
  0xab, 0x30, 0x4f, 0x2f, 0x07, 0xc9, 0x64, 0x79, 0x79, 0x3e, 0x17, 0xd6,
  0xcd, 0xe6, 0xb2, 0x1c, 0x08, 0x0c, 0xda, 0x82, 0x34, 0x5c, 0xbe, 0xf3,
  0xf8, 0x42, 0x44, 0x00, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10, 0xc6, 0x40,
  0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30,
  0xf8, 0xc8, 0x6d, 0x1b, 0xc2, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40,
  0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x8f,
  0xdc, 0x76, 0x01, 0x94, 0x41, 0xe0, 0xf7, 0xae, 0xd3, 0xe1, 0x75, 0xba,
  0xd0, 0x8a, 0x04, 0x02, 0x67, 0x55, 0xe9, 0x55, 0x98, 0xa7, 0x97, 0x83,
  0x64, 0xb2, 0xbc, 0x3c, 0x9f, 0x0b, 0xeb, 0x66, 0x73, 0x59, 0x0e, 0x04,
  0x06, 0x8b, 0xe0, 0x0d, 0x02, 0xbf, 0x70, 0x58, 0x2c, 0x86, 0x86, 0xe5,
  0x65, 0x37, 0x5d, 0x58, 0x37, 0x9b, 0xcb, 0x72, 0x20, 0x70, 0x66, 0xfd,
  0x91, 0xa4, 0xd7, 0x29, 0x5d, 0x5e, 0x1f, 0xd3, 0xeb, 0xf2, 0x32, 0x59,
  0x58, 0x37, 0x9b, 0xcb, 0x72, 0x60, 0x12, 0x08, 0x0c, 0xda, 0x81, 0x34,
  0x5c, 0xbe, 0xf3, 0xf8, 0xd3, 0x11, 0x11, 0xc0, 0x20, 0x0e, 0x3e, 0x72,
  0xdb, 0x56, 0xb0, 0x71, 0x4e, 0x23, 0x4d, 0x11, 0x25, 0x4c, 0x21, 0x42,
  0x44, 0x40, 0x24, 0x1c, 0x18, 0xe7, 0x34, 0xd2, 0x04, 0x34, 0x93, 0x64,
  0x06, 0x04, 0x03, 0x20, 0x4d, 0x05, 0xa4, 0x41, 0xe0, 0x37, 0x1f, 0xcb,
  0xc3, 0xf4, 0x31, 0xba, 0x59, 0x6e, 0xbf, 0xe5, 0x79, 0x20, 0x70, 0x56,
  0x95, 0x5e, 0x85, 0x79, 0x7a, 0x39, 0x48, 0x26, 0xcb, 0xcb, 0xf3, 0xb9,
  0xb0, 0x6e, 0x36, 0x97, 0xe5, 0x40, 0x60, 0xd0, 0x12, 0xaa, 0xe1, 0xf2,
  0x9d, 0xc7, 0x07, 0x26, 0x87, 0x41, 0x84, 0x0d, 0x69, 0xd0, 0xc7, 0x47,
  0x6e, 0xdb, 0x14, 0xa0, 0xe1, 0xf2, 0x9d, 0xc7, 0x0f, 0x90, 0x06, 0x88,
  0x30, 0xbf, 0xb8, 0xed, 0x1a, 0xe8, 0x83, 0xc0, 0x0f, 0x9d, 0x2e, 0xcb,
  0xc3, 0xf2, 0x31, 0x3a, 0x2f, 0xac, 0x9b, 0xcd, 0x65, 0x39, 0x10, 0x38,
  0xb3, 0xfe, 0x48, 0xd2, 0xeb, 0x94, 0x2e, 0xaf, 0x8f, 0xe9, 0x75, 0x79,
  0x99, 0x2c, 0xac, 0x9b, 0xcd, 0x65, 0x39, 0xb0, 0x8a, 0x4c, 0x97, 0xe5,
  0x61, 0xf9, 0x18, 0x9d, 0x77, 0xbe, 0xc9, 0x65, 0x20, 0x10, 0x08, 0x0c,
  0x5a, 0x43, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x01, 0x55, 0x14, 0x44, 0xc4,
  0x4e, 0x4e, 0x44, 0xf8, 0xc8, 0x6d, 0x03, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x1c, 0x03, 0x00, 0x00, 0x13, 0x04, 0x62, 0x10, 0x0b, 0x04, 0x00, 0x00,
  0x12, 0x00, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x14, 0x62, 0x40, 0x21, 0x95,
  0x51, 0xc9, 0x95, 0x5d, 0xf9, 0xff, 0xff, 0x3f, 0x94, 0x62, 0x40, 0xe9,
  0x06, 0xd4, 0x40, 0xf9, 0x67, 0x13, 0x27, 0x14, 0x54, 0x05, 0x02, 0x02,
  0x02, 0x42, 0x54, 0x20, 0x20, 0x20, 0x20, 0x42, 0xf9, 0xff, 0xff, 0xff,
  0x3f, 0x14, 0x67, 0x00, 0x45, 0x25, 0x50, 0x1e, 0x45, 0x40, 0xd8, 0x18,
  0x01, 0x08, 0x82, 0x20, 0xfc, 0x8d, 0x11, 0xbc, 0x33, 0x69, 0xa2, 0xbd,
  0x00, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xc0, 0xd9,
  0x41, 0x54, 0xb0, 0x01, 0x1b, 0x8c, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x70, 0x77, 0x20, 0x19, 0x72, 0x20, 0x07, 0x64, 0x30, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x1c, 0x1e, 0x4c, 0x07, 0x1c, 0xc0, 0x41, 0x19,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x97, 0x07, 0x14, 0x62, 0x07,
  0x76, 0x60, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xc0, 0xe9, 0x41,
  0x95, 0xd8, 0x81, 0x1d, 0x9c, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x70, 0x7b, 0x60, 0x21, 0x77, 0x70, 0x07, 0x68, 0x30, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x0e, 0x28, 0x4c, 0x78, 0x30, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0x14, 0x28, 0x5c, 0x42, 0x1e, 0x8c, 0x26, 0x04, 0x40, 0x05,
  0x15, 0x54, 0x20, 0xc0, 0x70, 0x43, 0x31, 0x90, 0xc1, 0x2c, 0x43, 0x10,
  0x06, 0x41, 0x19, 0x7a, 0x70, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xf0,
  0x89, 0x42, 0x18, 0x28, 0x81, 0x18, 0x8c, 0x26, 0x04, 0xc0, 0x70, 0x43,
  0xa0, 0x81, 0xc1, 0x2c, 0x43, 0x18, 0x08, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x7c, 0xa5, 0x40, 0x06, 0x0c, 0x1f, 0x94, 0xc1, 0x68, 0x42,
  0x00, 0x0c, 0x37, 0x10, 0x08, 0x19, 0xcc, 0x32, 0x0c, 0x61, 0x10, 0xcc,
  0x12, 0x10, 0x03, 0x15, 0x80, 0x32, 0xdc, 0xcc, 0x37, 0x50, 0x01, 0xb8,
  0xc4, 0x10, 0x3a, 0xdf, 0x40, 0x05, 0xe0, 0x12, 0x43, 0xdf, 0x7c, 0xc3,
  0x0d, 0x43, 0x43, 0x06, 0xb3, 0x0c, 0x48, 0x11, 0x14, 0xe1, 0x44, 0x05,
  0x62, 0x20, 0x15, 0x20, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xdf,
  0x2b, 0xb8, 0x81, 0x15, 0xbc, 0xc1, 0x68, 0x42, 0x00, 0xd4, 0x80, 0x0a,
  0x30, 0xdc, 0x20, 0xc0, 0x02, 0x18, 0xcc, 0x32, 0x18, 0x47, 0x30, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0xdf, 0x2c, 0xc8, 0x81, 0x26, 0xcc, 0xc1,
  0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x54, 0x82,
  0x0a, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1f, 0x2e, 0xdc, 0xc1,
  0x17, 0xe0, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0x94, 0xf3, 0x0a, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x5f,
  0x2f, 0xf0, 0x01, 0x19, 0x04, 0x7d, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0x37, 0x60, 0x7b, 0x03, 0xb6, 0x37, 0x60,
  0x7b, 0x0b, 0xb6, 0xb7, 0x60, 0x7b, 0x0b, 0xb6, 0x37, 0x61, 0x7b, 0x13,
  0xb6, 0x37, 0x61, 0x3b, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x19, 0x3b,
  0xa0, 0xc2, 0x60, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0xd6, 0x0e,
  0xa9, 0x30, 0x18, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x90, 0xb9, 0x83,
  0x2a, 0x0c, 0xc6, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x64, 0xef, 0xb0,
  0x0a, 0x03, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x19, 0x3c, 0xb0,
  0xc2, 0xc0, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x16, 0x0f, 0xad,
  0x30, 0x30, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x90, 0xc9, 0x43, 0x2b,
  0x24, 0xcc, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x64, 0xf3, 0xe0, 0x0a,
  0x09, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x19, 0x3d, 0xbc, 0x42,
  0xc2, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x56, 0x0f, 0xb0, 0x30,
  0x48, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x90, 0xd9, 0x43, 0x2c, 0x0c,
  0xd2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x64, 0xf7, 0x20, 0x0b, 0x83,
  0x64, 0x83, 0x28, 0xc0, 0xc7, 0x86, 0x51, 0x80, 0x8f, 0x0d, 0xa4, 0x00,
  0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xc8, 0xf6, 0xe1, 0x16, 0x98,
  0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x32, 0x7e, 0xc0, 0x05, 0x66,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xac, 0x1f, 0x72, 0x81, 0x19,
  0x6c, 0x48, 0xe0, 0x63, 0x43, 0x02, 0x1f, 0x1b, 0x12, 0xf8, 0xd8, 0xc0,
  0x0a, 0xf2, 0xb1, 0xa1, 0x15, 0xe4, 0x63, 0x83, 0x2b, 0xc8, 0xc7, 0x9e,
  0x21, 0x3e, 0xf6, 0x0c, 0xf1, 0xb1, 0x67, 0x88, 0x4f, 0xe5, 0x41, 0x2e,
  0xec, 0x2c, 0xc1, 0x53, 0x7a, 0x90, 0x0b, 0x3b, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0xdf, 0x49, 0x98, 0x83, 0x2b, 0xd8, 0xc1, 0x39, 0x8c, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x0d, 0xd8, 0xde,
  0x80, 0xed, 0x0d, 0xd8, 0x16, 0x28, 0xfc, 0x03, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0xc1, 0xf7, 0x12, 0xee, 0x60, 0x0b, 0xc1, 0x3b, 0x8c, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x0d, 0xd8, 0xde,
  0x80, 0xed, 0x0d, 0xd8, 0xda, 0xb0, 0xc0, 0xc7, 0x86, 0x05, 0x3e, 0x36,
  0x2c, 0xf0, 0xb1, 0xc1, 0x1c, 0xe4, 0x63, 0xc3, 0x39, 0xc8, 0xc7, 0x06,
  0x74, 0x90, 0x8f, 0x25, 0x43, 0x7c, 0x2c, 0x19, 0xe2, 0x63, 0xc9, 0x10,
  0x9f, 0x59, 0x82, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xa8, 0xb1,
  0xd0, 0x87, 0x72, 0xe0, 0x89, 0xd1, 0x84, 0x20, 0xa8, 0x40, 0x27, 0x74,
  0xb8, 0x21, 0xf8, 0x09, 0x30, 0x98, 0x65, 0x50, 0x92, 0xa0, 0x76, 0xe1,
  0x26, 0xae, 0x82, 0x9a, 0xd8, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xf8,
  0xca, 0x82, 0x24, 0xd8, 0x21, 0x28, 0x89, 0xd1, 0x84, 0x60, 0xb8, 0x00,
  0xab, 0x0b, 0x80, 0xa9, 0x60, 0x24, 0x74, 0x96, 0x60, 0x19, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x83, 0x4f, 0x2d, 0x52, 0x82, 0x1e, 0xc4, 0x21, 0x2c,
  0x46, 0x13, 0x02, 0x60, 0x96, 0x60, 0x19, 0xa8, 0x00, 0x8c, 0x44, 0x50,
  0x66, 0x19, 0x1a, 0x66, 0xa9, 0x72, 0x08, 0x8b, 0xab, 0xe0, 0x27, 0xb6,
  0x02, 0xb0, 0x80, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xf8, 0xe0, 0xe2,
  0x25, 0xee, 0x21, 0x80, 0x89, 0xd1, 0x84, 0x60, 0xb8, 0x00, 0xab, 0x0b,
  0x80, 0x99, 0x25, 0x70, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0xa3,
  0x8b, 0x99, 0xf0, 0x07, 0x76, 0x50, 0x8b, 0xd1, 0x84, 0x00, 0x98, 0x25,
  0x70, 0x06, 0x2a, 0x00, 0x83, 0x11, 0x9a, 0xe1, 0x86, 0x76, 0xa0, 0x8b,
  0x30, 0x98, 0x6e, 0x10, 0x98, 0x60, 0xba, 0xa1, 0x19, 0x84, 0x12, 0xdc,
  0xe2, 0x2a, 0x60, 0x8b, 0x1d, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x8f,
  0x2f, 0x76, 0x62, 0x24, 0x02, 0x9e, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x84, 0x2a, 0xe2, 0x02, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0xe0, 0x0b, 0x0d, 0xb0, 0x40, 0x89, 0x20, 0x2c, 0x46, 0x13,
  0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xe1, 0x10, 0x6c, 0x0f,
  0xc1, 0xf6, 0x10, 0x6c, 0xcf, 0xc0, 0xf6, 0x0c, 0x6c, 0xcf, 0xc0, 0xb6,
  0xa4, 0xbf, 0xb8, 0x0a, 0xfa, 0x62, 0x47, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xe0, 0x6b, 0x0d, 0xb6, 0xa0, 0x89, 0xa0, 0x2d, 0x46, 0x13, 0x02, 0x60,
  0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xa1, 0x0a, 0xd1, 0x80, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xf8, 0x64, 0x23, 0x2e, 0x72, 0x22, 0x90, 0x8b,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x38, 0x04,
  0xdb, 0x43, 0xb0, 0x3d, 0x04, 0xdb, 0x33, 0xb0, 0x3d, 0x03, 0xdb, 0x33,
  0xb0, 0x35, 0x63, 0x88, 0x8f, 0x19, 0x43, 0x7c, 0xcc, 0x18, 0xe2, 0x63,
  0xda, 0x15, 0x1f, 0xd3, 0xae, 0xf8, 0x98, 0x76, 0xc5, 0x67, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x32, 0xf2, 0x00, 0x8d, 0xc1, 0x18, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x83, 0xac, 0x3c, 0x42, 0x63, 0x30, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0x20, 0x33, 0x0f, 0xd1, 0x18, 0x0c, 0x63, 0x1e, 0xf8,
  0x18, 0xf3, 0xc0, 0xc7, 0x98, 0x07, 0x3e, 0x06, 0x06, 0x63, 0x00, 0x1f,
  0x03, 0x83, 0x31, 0x80, 0x8f, 0x81, 0xc1, 0x18, 0xc0, 0x67, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0xb2, 0xf6, 0x40, 0x8d, 0xc1, 0x18, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x83, 0xcc, 0x3d, 0x52, 0x63, 0x30, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0x20, 0x7b, 0x0f, 0xd5, 0x18, 0x0c, 0x1b, 0x18, 0xf8,
  0xd8, 0xc0, 0xc0, 0xc7, 0x06, 0x06, 0x3e, 0x36, 0xf8, 0x85, 0x7c, 0x6c,
  0xf8, 0x0b, 0xf9, 0xd8, 0x00, 0x1a, 0xf2, 0xb1, 0x64, 0x88, 0x8f, 0x25,
  0x43, 0x7c, 0x2c, 0x19, 0xe2, 0x53, 0x7f, 0x10, 0x1b, 0x3a, 0x4b, 0xf0,
  0x0c, 0x74, 0x60, 0x88, 0xc3, 0x1e, 0x06, 0x5e, 0x1c, 0x03, 0x1d, 0x18,
  0xe2, 0xb0, 0x87, 0x81, 0x17, 0xc7, 0x40, 0x07, 0x86, 0x38, 0xec, 0x61,
  0xe0, 0xc5, 0x31, 0xd0, 0x81, 0x51, 0x0e, 0x7e, 0x18, 0xa4, 0x71, 0x0c,
  0x74, 0x60, 0x94, 0x83, 0x1f, 0x06, 0x69, 0x1c, 0x03, 0x1d, 0x18, 0xe5,
  0xe0, 0x87, 0x41, 0x1a, 0xc7, 0x40, 0x07, 0xe0, 0x38, 0xf2, 0x61, 0xc0,
  0xc7, 0x31, 0xd0, 0x01, 0xb0, 0x84, 0xa3, 0x3f, 0x86, 0xfe, 0x1c, 0x85,
  0x17, 0xf4, 0x71, 0x15, 0xc8, 0xc7, 0xde, 0x01, 0xec, 0x1d, 0xc0, 0xde,
  0x01, 0xec, 0x35, 0xc0, 0x5e, 0x03, 0xec, 0x35, 0xc0, 0x8e, 0x18, 0x34,
  0x00, 0x08, 0x82, 0x41, 0x18, 0x9c, 0x48, 0x78, 0xbc, 0xc6, 0x81, 0x1e,
  0x46, 0x41, 0x28, 0xb7, 0x51, 0x47, 0x7e, 0xc0, 0x88, 0x41, 0x03, 0x80,
  0x20, 0x18, 0x84, 0x01, 0x8a, 0x88, 0x07, 0x6c, 0x04, 0xe9, 0x41, 0x0c,
  0x82, 0x82, 0x1b, 0xc3, 0x0d, 0xa1, 0x61, 0x22, 0x60, 0x30, 0xcb, 0x00,
  0x06, 0x50, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x94, 0x8b, 0x94,
  0x07, 0x6c, 0x9c, 0xc8, 0x68, 0x42, 0x10, 0x54, 0x50, 0x22, 0x3a, 0xdc,
  0x10, 0xa8, 0x08, 0x18, 0xcc, 0x32, 0x48, 0x51, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x9f, 0x8b, 0xb4, 0x47, 0x6e, 0x98, 0xc6, 0x8a, 0x8c,
  0x26, 0x04, 0xc0, 0x2c, 0xc1, 0x34, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0x1f, 0x8c, 0xbc, 0x87, 0x6e, 0xa0, 0x46, 0x8b, 0x8c, 0x26, 0x04, 0x40,
  0x05, 0xe4, 0xa1, 0xb3, 0x04, 0xd3, 0x40, 0x05, 0x80, 0x44, 0x82, 0x54,
  0x41, 0x8b, 0xdc, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x58, 0x38, 0x62,
  0x1e, 0xbe, 0x21, 0x23, 0x41, 0x7d, 0xd4, 0x07, 0x6b, 0x0c, 0x37, 0x04,
  0x33, 0x02, 0x06, 0xb3, 0x0c, 0x60, 0x40, 0x05, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x40, 0xed, 0x88, 0x7c, 0xf4, 0x06, 0x8d, 0x8c, 0x26, 0x04,
  0x41, 0x05, 0x32, 0xa2, 0xc3, 0x0d, 0xc1, 0x8d, 0x80, 0xc1, 0x2c, 0x83,
  0x55, 0x05, 0x85, 0xbc, 0xc8, 0x55, 0xd0, 0x22, 0x3b, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x5f, 0x8f, 0xf0, 0x07, 0x79, 0x04, 0xfd, 0x31, 0x9a,
  0x10, 0x0c, 0x17, 0x60, 0x75, 0x01, 0x30, 0x15, 0xec, 0x87, 0xce, 0x12,
  0x5c, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xf0, 0x89, 0x49, 0x88, 0xb0,
  0xc7, 0x93, 0x23, 0xa3, 0x09, 0x01, 0x30, 0x4b, 0x70, 0x0d, 0x54, 0x00,
  0x46, 0x25, 0x58, 0xc3, 0x0d, 0xbc, 0x01, 0x89, 0xc1, 0x70, 0x83, 0xe0,
  0x1b, 0x61, 0x50, 0x42, 0xc0, 0x17, 0x00, 0x51, 0x14, 0x78, 0x40, 0x49,
  0x68, 0xa2, 0xc3, 0x0d, 0x01, 0x9a, 0x80, 0xc1, 0x2c, 0xc3, 0x87, 0x05,
  0xb3, 0x0c, 0x5a, 0x26, 0x55, 0x06, 0x26, 0x57, 0x81, 0x8f, 0xec, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x7c, 0x6e, 0xd2, 0x22, 0xf5, 0x11, 0xb8,
  0xc8, 0x68, 0x42, 0x30, 0x5c, 0x80, 0xd5, 0x05, 0xc0, 0x54, 0xc0, 0x22,
  0x3a, 0x4b, 0xb0, 0x8d, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x37, 0x27,
  0x32, 0xd2, 0x1f, 0x60, 0xa0, 0x26, 0xa3, 0x09, 0x01, 0x30, 0x4b, 0xb0,
  0x0d, 0x54, 0x00, 0x46, 0x26, 0x68, 0x23, 0x06, 0x0d, 0x00, 0x82, 0x60,
  0x10, 0x06, 0x75, 0xf2, 0x22, 0x21, 0x12, 0xcc, 0xc9, 0x18, 0xd8, 0x88,
  0x8d, 0xd8, 0x88, 0x89, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0xa5,
  0x27, 0x31, 0xc2, 0x1f, 0x73, 0x32, 0x9a, 0x10, 0x04, 0x15, 0xc4, 0x89,
  0x0e, 0x37, 0x04, 0x76, 0x02, 0x06, 0xb3, 0x0c, 0x1d, 0x17, 0xd4, 0x19,
  0xb8, 0xc9, 0x55, 0xc0, 0x26, 0x5b, 0x41, 0x9b, 0xc0, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x7c, 0x7d, 0xc2, 0x23, 0x24, 0x12, 0xf4, 0xc8, 0x68,
  0x42, 0x30, 0x5c, 0x80, 0xd5, 0x05, 0xc0, 0xcc, 0x12, 0x78, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0xf0, 0x85, 0x0a, 0x98, 0xac, 0x88, 0x1b, 0xdc,
  0xc9, 0x68, 0x42, 0x00, 0xcc, 0x12, 0x78, 0x03, 0x15, 0x80, 0xc1, 0x09,
  0xdd, 0x88, 0x41, 0x03, 0x80, 0x20, 0x18, 0x84, 0xc1, 0xa8, 0xf4, 0xc8,
  0x8b, 0x04, 0xa1, 0x12, 0x07, 0x64, 0x42, 0x26, 0x64, 0x42, 0x23, 0xb3,
  0x04, 0xdf, 0x2c, 0x01, 0x31, 0x4b, 0x10, 0x06, 0x18, 0x0e, 0x04, 0x00,
  0x4a, 0x01, 0x00, 0x00, 0x26, 0x2b, 0x40, 0x34, 0xce, 0xe4, 0xdb, 0x65,
  0x80, 0xe1, 0x23, 0x74, 0x5d, 0xf3, 0xc6, 0x2c, 0x60, 0xf8, 0x48, 0x5d,
  0xeb, 0xb9, 0xa9, 0x07, 0x18, 0x3e, 0x62, 0xd7, 0x77, 0x6f, 0xee, 0x01,
  0xc4, 0x67, 0x22, 0x8d, 0xdd, 0x07, 0x10, 0x9f, 0x09, 0x5c, 0xa4, 0x89,
  0x2e, 0xe0, 0xe7, 0xa8, 0x8c, 0x0e, 0x2a, 0x4c, 0xae, 0xcc, 0x8d, 0x2e,
  0xc9, 0x8d, 0xac, 0x0c, 0x0f, 0x08, 0x28, 0x2b, 0x28, 0x29, 0x09, 0x48,
  0xcb, 0xa5, 0x0c, 0x2f, 0x8d, 0xce, 0x8a, 0x03, 0x12, 0x9f, 0xc6, 0x6b,
  0xdf, 0xa7, 0x71, 0xdb, 0xf0, 0x03, 0x8c, 0xcf, 0x04, 0xae, 0x3c, 0xb7,
  0xfc, 0x00, 0xe3, 0x33, 0x81, 0x2b, 0xd7, 0xed, 0x33, 0xc0, 0xf0, 0x11,
  0xba, 0xb6, 0x6b, 0x13, 0x0d, 0x30, 0x7c, 0x84, 0xae, 0x6d, 0xdc, 0xda,
  0x03, 0x0c, 0x1f, 0xb1, 0x6b, 0xdc, 0xb6, 0xd2, 0x00, 0xc3, 0x47, 0xe8,
  0xda, 0xde, 0xad, 0x88, 0x72, 0xa8, 0xe9, 0xa1, 0xa6, 0xed, 0x0d, 0x7f,
  0x57, 0x7b, 0xff, 0x08, 0xb0, 0x02, 0xaa, 0xb0, 0xf9, 0x00, 0xc3, 0x47,
  0xec, 0x1a, 0xcf, 0xed, 0x50, 0xc0, 0x09, 0x9c, 0xab, 0x03, 0x26, 0xc0,
  0xa7, 0x7d, 0xda, 0x47, 0x68, 0xb3, 0x0f, 0x30, 0x7c, 0xc4, 0xae, 0x71,
  0xde, 0x10, 0x05, 0x9c, 0xc0, 0xb9, 0x3a, 0x60, 0x02, 0x7c, 0xda, 0xa7,
  0x7d, 0xa4, 0xb6, 0x44, 0x01, 0x27, 0x70, 0xae, 0x0e, 0x98, 0x00, 0x9f,
  0xf6, 0x69, 0x1f, 0xb1, 0x6d, 0x56, 0x20, 0xf0, 0xed, 0xcf, 0xf8, 0x4c,
  0xe0, 0xd2, 0x6d, 0x03, 0x0c, 0x30, 0x3e, 0x13, 0xb8, 0xf4, 0xdb, 0x02,
  0x03, 0x8c, 0xcf, 0x04, 0x2e, 0x1d, 0x37, 0x3e, 0xe3, 0x33, 0x81, 0x4b,
  0xcf, 0xad, 0xcf, 0xf8, 0x4c, 0xe0, 0xd2, 0x75, 0xf3, 0x33, 0x3e, 0x13,
  0xb8, 0xf4, 0xdd, 0x50, 0x03, 0x0c, 0x1f, 0xa1, 0xeb, 0x9b, 0xb6, 0xb6,
  0x65, 0x71, 0x80, 0xe1, 0xa6, 0x7d, 0x01, 0x90, 0x26, 0xa3, 0x0d, 0x30,
  0x7c, 0x84, 0xae, 0xef, 0xdb, 0x06, 0x03, 0x0c, 0x1f, 0xa9, 0x6b, 0x7a,
  0x37, 0xfe, 0x00, 0xc3, 0x47, 0xec, 0x3a, 0xaf, 0x0d, 0x3d, 0xc0, 0xf0,
  0x11, 0xba, 0xbe, 0x77, 0xfb, 0x0f, 0x30, 0x7c, 0xc4, 0xae, 0x73, 0xdc,
  0x04, 0x05, 0x0c, 0x1f, 0xb1, 0xeb, 0x7c, 0xb7, 0xc4, 0x00, 0xc3, 0x47,
  0xea, 0xba, 0xa6, 0x6d, 0x3d, 0xc0, 0xf0, 0x11, 0xba, 0xc6, 0x69, 0x63,
  0x0c, 0x30, 0x7c, 0xa4, 0xae, 0xeb, 0xdb, 0xe2, 0x03, 0x0c, 0x1f, 0xa1,
  0x6b, 0xfc, 0xb6, 0xc7, 0x00, 0xc3, 0x47, 0xea, 0xba, 0xd6, 0x8d, 0x3e,
  0xc0, 0xf0, 0x11, 0xba, 0xc6, 0x75, 0xc3, 0x0c, 0x30, 0x7c, 0xa4, 0xae,
  0xeb, 0xde, 0xf4, 0x03, 0x0c, 0x1f, 0xa1, 0x6b, 0xbc, 0x27, 0x3d, 0x84,
  0x42, 0xc0, 0xcf, 0xd0, 0x5b, 0x1b, 0x5c, 0x1d, 0x5d, 0x19, 0x53, 0x59,
  0x98, 0x59, 0x50, 0x90, 0x90, 0x10, 0x10, 0x50, 0x56, 0xd0, 0x4f, 0x50,
  0x95, 0xd0, 0x5b, 0x9d, 0x1b, 0x59, 0x9a, 0xdb, 0x99, 0xd0, 0x1b, 0x1e,
  0x10, 0x50, 0x52, 0x52, 0x50, 0x52, 0x90, 0xd5, 0x0f, 0x89, 0x5d, 0xd9,
  0x18, 0xdd, 0x9b, 0x1c, 0x50, 0x12, 0x09, 0x4c, 0x0c, 0x10, 0x10, 0x90,
  0x96, 0x4b, 0x19, 0x5e, 0x1a, 0x1d, 0xc9, 0x23, 0x0c, 0x02, 0x7e, 0x8e,
  0xca, 0xe8, 0xa4, 0xd2, 0xce, 0xd0, 0xe8, 0x86, 0xd0, 0xd2, 0xd8, 0xc8,
  0x92, 0xdc, 0xc8, 0xca, 0xf0, 0x80, 0x80, 0xb2, 0x82, 0x92, 0x92, 0x80,
  0xb4, 0x5c, 0xca, 0xf0, 0xd2, 0xe8, 0xee, 0x43, 0xf2, 0x03, 0x40, 0x50,
  0x88, 0xc1, 0x20, 0xfc, 0x00, 0x10, 0x14, 0x62, 0x30, 0x08, 0xb3, 0x92,
  0x24, 0x0b, 0x78, 0xb8, 0x03, 0x59, 0x06, 0xb1, 0x19, 0x10, 0x81, 0x90,
  0x7c, 0xda, 0x40, 0x03, 0x0c, 0x1f, 0xa9, 0x6b, 0xdb, 0x36, 0xb7, 0x65,
  0x71, 0x80, 0xe1, 0xb6, 0x7d, 0x01, 0x90, 0x26, 0xeb, 0x0f, 0x30, 0x7c,
  0x84, 0xae, 0x73, 0xdb, 0x46, 0x03, 0x0c, 0x1f, 0xa9, 0x6b, 0x3b, 0x37,
  0x40, 0x01, 0xc3, 0x47, 0xe8, 0x3a, 0xcf, 0xcd, 0x34, 0xc0, 0xf0, 0x91,
  0xba, 0xb6, 0x79, 0xc3, 0x0d, 0x20, 0x7c, 0x1a, 0xaf, 0x4d, 0xa8, 0x3b,
  0x10, 0x22, 0x02, 0x22, 0xe1, 0xc0, 0x36, 0xaa, 0x28, 0x88, 0xe8, 0x77,
  0xb5, 0xf7, 0x97, 0xa6, 0x88, 0x12, 0xa6, 0x80, 0x2a, 0xec, 0x53, 0x80,
  0xf0, 0x69, 0xfc, 0x36, 0xe1, 0x00, 0xc2, 0xa7, 0x71, 0xdb, 0x82, 0x05,
  0x08, 0x9f, 0xc6, 0x73, 0x83, 0x15, 0x20, 0x7c, 0x1a, 0xc7, 0x49, 0x17,
  0x62, 0x10, 0xf0, 0x73, 0x54, 0x46, 0xc7, 0x54, 0x66, 0x46, 0x37, 0x84,
  0x96, 0xc6, 0x46, 0x96, 0xe4, 0x46, 0x56, 0x86, 0x07, 0x04, 0x94, 0x15,
  0x94, 0x94, 0x04, 0xa4, 0xe5, 0x52, 0x86, 0x97, 0x46, 0x17, 0x63, 0x63,
  0xcf, 0x02, 0x84, 0x4f, 0xe3, 0x34, 0x69, 0x43, 0x0c, 0x02, 0x7e, 0x8e,
  0xca, 0xe8, 0x98, 0xca, 0xcc, 0xe8, 0x86, 0xd0, 0xd2, 0xd8, 0xc8, 0x92,
  0xdc, 0xc8, 0xca, 0xf0, 0x80, 0x80, 0xb2, 0x82, 0x92, 0x92, 0x80, 0xb4,
  0x5c, 0xca, 0xf0, 0xd2, 0xe8, 0x62, 0x72, 0x6e, 0x60, 0xf2, 0x03, 0x40,
  0x50, 0x88, 0xc1, 0x20, 0xfc, 0x27, 0x22, 0x0e, 0x02, 0x18, 0x88, 0xc8,
  0xde, 0x03, 0x8c, 0xcf, 0x44, 0x9a, 0x7c, 0x37, 0xf8, 0x00, 0xe3, 0x33,
  0x91, 0x26, 0xe7, 0xad, 0x30, 0xc0, 0xf8, 0x4c, 0xa4, 0xc9, 0x7b, 0x33,
  0x1a, 0x03, 0xce, 0x69, 0xa4, 0x29, 0xa2, 0x84, 0x29, 0x44, 0x88, 0x08,
  0x88, 0x84, 0x03, 0xe3, 0x9c, 0x46, 0x9a, 0x80, 0x66, 0x92, 0x7e, 0x21,
  0xa0, 0x8a, 0x82, 0x88, 0x2c, 0x35, 0xc0, 0xf0, 0x91, 0xba, 0xbe, 0x6b,
  0x63, 0x15, 0x30, 0x7c, 0x84, 0xae, 0x75, 0x9a, 0xe4, 0x20, 0x06, 0x01,
  0x3f, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69,
  0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x40, 0x40, 0x59, 0x41, 0x49,
  0x49, 0x40, 0x5a, 0x2e, 0x65, 0x78, 0x69, 0x74, 0x35, 0xd6, 0x2b, 0x60,
  0xf8, 0x08, 0x5d, 0xeb, 0xb6, 0x11, 0x06, 0x18, 0x3e, 0x62, 0xd7, 0x34,
  0x6f, 0xbf, 0x01, 0x86, 0x8f, 0xd4, 0xf5, 0xad, 0x5b, 0x7a, 0x80, 0xe1,
  0x23, 0x75, 0x7d, 0xf3, 0x16, 0x2a, 0x90, 0x68, 0x93, 0xc3, 0x20, 0x82,
  0x36, 0x0c, 0x66, 0x18, 0x60, 0x7c, 0x26, 0xd2, 0xe8, 0xb4, 0x1d, 0x06,
  0x18, 0x9f, 0x89, 0x34, 0x7a, 0x6d, 0x44, 0x98, 0x24, 0x44, 0xc0, 0x24,
  0x1c, 0x26, 0xc1, 0x38, 0x11, 0xf6, 0xbb, 0xda, 0xfb, 0x47, 0x80, 0x15,
  0x50, 0x85, 0x29, 0x0a, 0x3c, 0x0e, 0x35, 0x3d, 0xd4, 0xf4, 0x2d, 0x80,
  0xe1, 0xd3, 0x3e, 0x42, 0xdb, 0xa2, 0xc0, 0xe3, 0x50, 0xd3, 0x43, 0x4d,
  0xdf, 0x02, 0x18, 0x3e, 0xed, 0x23, 0x35, 0x69, 0x01, 0x0c, 0x02, 0x7e,
  0x8e, 0xca, 0xe8, 0x98, 0xca, 0xcc, 0xe8, 0x86, 0xd0, 0xd2, 0xd8, 0xc8,
  0x92, 0xdc, 0xc8, 0xca, 0xf0, 0x80, 0x80, 0xb2, 0x82, 0x92, 0x92, 0x80,
  0xb4, 0x5c, 0xca, 0xf0, 0xd2, 0xe8, 0x8c, 0x38, 0x20, 0xf1, 0x69, 0xdc,
  0xf6, 0x7d, 0x1a, 0xaf, 0x2d, 0xcf, 0xf8, 0x4c, 0xa4, 0xd1, 0x79, 0xd3,
  0x33, 0x3e, 0x13, 0x69, 0xf4, 0xde, 0x14, 0x03, 0x0c, 0x1f, 0xb1, 0xeb,
  0xba, 0x36, 0xf6, 0x00, 0xc3, 0x47, 0xea, 0x1a, 0xaf, 0xad, 0x31, 0xc0,
  0xf0, 0x11, 0xbb, 0xae, 0x71, 0x7b, 0x5b, 0x16, 0x07, 0x18, 0x6e, 0xdc,
  0x17, 0x00, 0x69, 0x32, 0xf9, 0x00, 0xc3, 0x47, 0xea, 0x1a, 0xc7, 0x0d,
  0x32, 0xc0, 0xf0, 0x11, 0xbb, 0xae, 0xf7, 0x0b, 0x49, 0xfc, 0xc5, 0x71,
  0x1e, 0xe2, 0x42, 0x26, 0xab, 0x0f, 0x30, 0x7c, 0xa4, 0xae, 0xf1, 0xfd,
  0x40, 0x24, 0x7f, 0x71, 0x9c, 0x87, 0xb8, 0x90, 0xc9, 0x5f, 0x1c, 0xe7,
  0x21, 0x2e, 0x64, 0x32, 0x42, 0x01, 0x27, 0x70, 0xae, 0x0e, 0x98, 0x00,
  0xbf, 0xf6, 0x69, 0x1f, 0xa1, 0xad, 0x50, 0xc0, 0x09, 0x9c, 0xab, 0x03,
  0x26, 0xc0, 0xaf, 0x7d, 0xda, 0x47, 0x6a, 0x33, 0x14, 0x70, 0x02, 0xe7,
  0xea, 0x80, 0x09, 0xf0, 0x6b, 0x9f, 0xf6, 0x11, 0xdb, 0xf6, 0x8c, 0xcf,
  0x44, 0x9a, 0x9d, 0x36, 0x3b, 0xe3, 0x33, 0x91, 0x66, 0xaf, 0xed, 0xce,
  0xf8, 0x4c, 0xa4, 0xd9, 0x6d, 0xc3, 0x33, 0x3e, 0x13, 0x69, 0xf6, 0xdb,
  0x86, 0xca, 0x40, 0x38, 0x90, 0x65, 0x38, 0x9d, 0x81, 0x90, 0xd2, 0xc8,
  0x11, 0x08, 0x49, 0x22, 0x06, 0xce, 0xa1, 0x9a, 0x89, 0x88, 0x7e, 0x57,
  0x7b, 0xff, 0x08, 0xb0, 0x02, 0xaa, 0xb0, 0x2a, 0xa7, 0xa1, 0x98, 0x36,
  0x42, 0x80, 0xc6, 0x58, 0x08, 0xc9, 0xa7, 0x8d, 0x6a, 0x69, 0x9c, 0x81,
  0x10, 0x9b, 0x81, 0xb8, 0x7c, 0xda, 0x32, 0x03, 0x0c, 0x1f, 0xb1, 0x6b,
  0x9b, 0x36, 0xc1, 0x00, 0xc3, 0x47, 0xe8, 0x9a, 0xd6, 0x2d, 0x34, 0xc0,
  0xf0, 0x11, 0xbb, 0xb6, 0x6f, 0x43, 0x0c, 0x30, 0x7c, 0x84, 0xae, 0xe9,
  0xde, 0x48, 0x03, 0x0c, 0x1f, 0xb1, 0x6b, 0x5b, 0xb7, 0xfd, 0x00, 0xc3,
  0x47, 0xea, 0x3a, 0xa7, 0xed, 0x34, 0xc0, 0xf0, 0x11, 0xbb, 0xb6, 0x7b,
  0xf3, 0x0f, 0x30, 0x7c, 0xa4, 0xae, 0xf3, 0xdb, 0x02, 0x05, 0x0c, 0x1f,
  0xa9, 0xeb, 0x5c, 0x3f, 0x82, 0xc4, 0x0f, 0x00, 0x41, 0x21, 0x06, 0x83,
  0xb0, 0x20, 0x0f, 0x00, 0x82, 0x20, 0x05, 0x22, 0xa2, 0x99, 0x36, 0xaa,
  0x28, 0x88, 0xe8, 0x77, 0xb5, 0xf7, 0x97, 0xa6, 0x88, 0x12, 0xa6, 0x80,
  0x2a, 0x6c, 0x31, 0xc0, 0xf0, 0x11, 0xba, 0xae, 0x6d, 0x73, 0x0c, 0x30,
  0x7c, 0x84, 0xae, 0xeb, 0xdc, 0x54, 0x03, 0x0c, 0x1f, 0xb1, 0xeb, 0xdb,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
