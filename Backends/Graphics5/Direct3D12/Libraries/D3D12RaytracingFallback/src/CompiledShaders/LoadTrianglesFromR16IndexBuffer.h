#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer LoadPrimitivesConstants
; {
;
;   struct LoadPrimitivesConstants
;   {
;
;       struct struct.LoadPrimitivesInputConstants
;       {
;
;           uint ElementBufferStride;                 ; Offset:    0
;           uint IndexBufferOffset;                   ; Offset:    4
;           uint NumPrimitivesBound;                  ; Offset:    8
;           uint PrimitiveOffset;                     ; Offset:   12
;           uint TotalPrimitiveCount;                 ; Offset:   16
;           uint GeometryContributionToHitGroupIndex; ; Offset:   20
;           uint HasValidTransform;                   ; Offset:   24
;           uint GeometryFlags;                       ; Offset:   28
;           uint PerformUpdate;                       ; Offset:   32
;       
;       } Constants                                   ; Offset:    0
;
;   
;   } LoadPrimitivesConstants                         ; Offset:    0 Size:    36
;
; }
;
; Resource bind info for TransformBuffer
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for PrimitiveBuffer
; {
;
;   struct struct.Primitive
;   {
;
;       uint PrimitiveType;                           ; Offset:    0
;       uint4 data0;                                  ; Offset:   16
;       uint4 data1;                                  ; Offset:   32
;       uint data2;                                   ; Offset:   48
;   
;   } $Element;                                       ; Offset:    0 Size:    40
;
; }
;
; Resource bind info for MetadataBuffer
; {
;
;   struct struct.PrimitiveMetaData
;   {
;
;       uint GeometryContributionToHitGroupIndex;     ; Offset:    0
;       uint PrimitiveIndex;                          ; Offset:    4
;       uint GeometryFlags;                           ; Offset:    8
;   
;   } $Element;                                       ; Offset:    0 Size:    12
;
; }
;
; Resource bind info for CachedSortBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; LoadPrimitivesConstants           cbuffer      NA          NA     CB0            cb0     1
; elementBuffer                     texture    byte         r/o      T0             t0     1
; indexBuffer                       texture    byte         r/o      T1             t1     1
; TransformBuffer                   texture  struct         r/o      T2             t2     1
; PrimitiveBuffer                       UAV  struct         r/w      U0             u0     1
; MetadataBuffer                        UAV  struct         r/w      U1             u1     1
; CachedSortBuffer                      UAV  struct         r/w      U2             u2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%"class.RWStructuredBuffer<Primitive>" = type { %struct.Primitive }
%struct.Primitive = type { i32, <4 x i32>, <4 x i32>, i32 }
%"class.RWStructuredBuffer<PrimitiveMetaData>" = type { %struct.PrimitiveMetaData }
%struct.PrimitiveMetaData = type { i32, i32, i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%LoadPrimitivesConstants = type { %struct.LoadPrimitivesInputConstants }
%struct.LoadPrimitivesInputConstants = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%struct.Triangle = type { <3 x float>, <3 x float>, <3 x float> }

@"\01?PrimitiveBuffer@@3V?$RWStructuredBuffer@UPrimitive@@@@A" = external constant %"class.RWStructuredBuffer<Primitive>", align 4
@"\01?MetadataBuffer@@3V?$RWStructuredBuffer@UPrimitiveMetaData@@@@A" = external constant %"class.RWStructuredBuffer<PrimitiveMetaData>", align 4
@"\01?CachedSortBuffer@@3V?$RWStructuredBuffer@I@@A" = external constant %"class.RWStructuredBuffer<unsigned int>", align 4
@"\01?elementBuffer@@3UByteAddressBuffer@@A" = external constant %struct.ByteAddressBuffer, align 4
@"\01?indexBuffer@@3UByteAddressBuffer@@A" = external constant %struct.ByteAddressBuffer, align 4
@"\01?TransformBuffer@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@LoadPrimitivesConstants = external constant %LoadPrimitivesConstants

define void @main() {
  %CachedSortBuffer_UAV_structbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %MetadataBuffer_UAV_structbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %PrimitiveBuffer_UAV_structbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %TransformBuffer_texture_structbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %indexBuffer_texture_rawbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %elementBuffer_texture_rawbuf = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %LoadPrimitivesConstants_cbuffer = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %2 = alloca [2 x i32], align 4
  %3 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %LoadPrimitivesConstants_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %4 = extractvalue %dx.types.CBufRet.i32 %3, 2
  %5 = icmp ult i32 %1, %4
  br i1 %5, label %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3", label %98

"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3":    ; preds = %0
  %6 = mul i32 %1, 6
  %7 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %LoadPrimitivesConstants_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %8 = extractvalue %dx.types.CBufRet.i32 %7, 1
  %9 = add i32 %8, %6
  %10 = and i32 %9, 3
  %11 = icmp eq i32 %10, 2
  %12 = add i32 %9, -2
  %.4 = select i1 %11, i32 %12, i32 %9
  %13 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %indexBuffer_texture_rawbuf, i32 %.4, i32 undef)  ; BufferLoad(srv,index,wot)
  %14 = extractvalue %dx.types.ResRet.i32 %13, 0
  %15 = extractvalue %dx.types.ResRet.i32 %13, 1
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i32 0, i32 0
  store i32 %14, i32* %16, align 4
  %17 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i32 0, i32 1
  store i32 %15, i32* %17, align 4
  %18 = lshr i32 %14, 16
  %19 = and i32 %14, 65535
  %20 = select i1 %11, i32 %18, i32 %19
  %21 = select i1 %11, i32 2, i32 1
  %22 = lshr i32 %21, 1
  %23 = getelementptr [2 x i32], [2 x i32]* %2, i32 0, i32 %22
  %24 = load i32, i32* %23, align 4, !tbaa !61
  %25 = and i32 %21, 1
  %26 = icmp eq i32 %25, 0
  %27 = and i32 %24, 65535
  %28 = lshr i32 %24, 16
  %29 = select i1 %26, i32 %27, i32 %28
  %30 = and i32 %15, 65535
  %31 = lshr i32 %15, 16
  %.sink82 = select i1 %11, i32 %31, i32 %30
  %32 = extractvalue %dx.types.CBufRet.i32 %7, 0
  %33 = mul i32 %32, %20
  %34 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %elementBuffer_texture_rawbuf, i32 %33, i32 undef)  ; BufferLoad(srv,index,wot)
  %35 = extractvalue %dx.types.ResRet.i32 %34, 0
  %36 = extractvalue %dx.types.ResRet.i32 %34, 1
  %37 = extractvalue %dx.types.ResRet.i32 %34, 2
  %.i044 = bitcast i32 %35 to float
  %.i145 = bitcast i32 %36 to float
  %.i246 = bitcast i32 %37 to float
  %38 = mul i32 %32, %29
  %39 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %elementBuffer_texture_rawbuf, i32 %38, i32 undef)  ; BufferLoad(srv,index,wot)
  %40 = extractvalue %dx.types.ResRet.i32 %39, 0
  %41 = extractvalue %dx.types.ResRet.i32 %39, 1
  %42 = extractvalue %dx.types.ResRet.i32 %39, 2
  %.i041 = bitcast i32 %40 to float
  %.i142 = bitcast i32 %41 to float
  %.i243 = bitcast i32 %42 to float
  %43 = mul i32 %32, %.sink82
  %44 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %elementBuffer_texture_rawbuf, i32 %43, i32 undef)  ; BufferLoad(srv,index,wot)
  %45 = extractvalue %dx.types.ResRet.i32 %44, 0
  %46 = extractvalue %dx.types.ResRet.i32 %44, 1
  %47 = extractvalue %dx.types.ResRet.i32 %44, 2
  %.i0 = bitcast i32 %45 to float
  %.i1 = bitcast i32 %46 to float
  %.i2 = bitcast i32 %47 to float
  %48 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %LoadPrimitivesConstants_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.i32 %48, 2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %85, label %51

; <label>:51                                      ; preds = %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3"
  %52 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %TransformBuffer_texture_structbuf, i32 0, i32 0)  ; BufferLoad(srv,index,wot)
  %53 = extractvalue %dx.types.ResRet.f32 %52, 0
  %54 = extractvalue %dx.types.ResRet.f32 %52, 1
  %55 = extractvalue %dx.types.ResRet.f32 %52, 2
  %56 = extractvalue %dx.types.ResRet.f32 %52, 3
  %57 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %TransformBuffer_texture_structbuf, i32 1, i32 0)  ; BufferLoad(srv,index,wot)
  %58 = extractvalue %dx.types.ResRet.f32 %57, 0
  %59 = extractvalue %dx.types.ResRet.f32 %57, 1
  %60 = extractvalue %dx.types.ResRet.f32 %57, 2
  %61 = extractvalue %dx.types.ResRet.f32 %57, 3
  %62 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %TransformBuffer_texture_structbuf, i32 2, i32 0)  ; BufferLoad(srv,index,wot)
  %63 = extractvalue %dx.types.ResRet.f32 %62, 0
  %64 = extractvalue %dx.types.ResRet.f32 %62, 1
  %65 = extractvalue %dx.types.ResRet.f32 %62, 2
  %66 = extractvalue %dx.types.ResRet.f32 %62, 3
  %67 = fmul fast float %53, %.i044
  %FMad37 = call float @dx.op.tertiary.f32(i32 46, float %.i145, float %54, float %67)  ; FMad(a,b,c)
  %FMad36 = call float @dx.op.tertiary.f32(i32 46, float %.i246, float %55, float %FMad37)  ; FMad(a,b,c)
  %68 = fadd fast float %FMad36, %56
  %69 = fmul fast float %58, %.i044
  %FMad34 = call float @dx.op.tertiary.f32(i32 46, float %.i145, float %59, float %69)  ; FMad(a,b,c)
  %FMad33 = call float @dx.op.tertiary.f32(i32 46, float %.i246, float %60, float %FMad34)  ; FMad(a,b,c)
  %70 = fadd fast float %FMad33, %61
  %71 = fmul fast float %63, %.i044
  %FMad31 = call float @dx.op.tertiary.f32(i32 46, float %.i145, float %64, float %71)  ; FMad(a,b,c)
  %FMad30 = call float @dx.op.tertiary.f32(i32 46, float %.i246, float %65, float %FMad31)  ; FMad(a,b,c)
  %72 = fadd fast float %FMad30, %66
  %73 = fmul fast float %53, %.i041
  %FMad28 = call float @dx.op.tertiary.f32(i32 46, float %.i142, float %54, float %73)  ; FMad(a,b,c)
  %FMad27 = call float @dx.op.tertiary.f32(i32 46, float %.i243, float %55, float %FMad28)  ; FMad(a,b,c)
  %74 = fadd fast float %FMad27, %56
  %75 = fmul fast float %58, %.i041
  %FMad25 = call float @dx.op.tertiary.f32(i32 46, float %.i142, float %59, float %75)  ; FMad(a,b,c)
  %FMad24 = call float @dx.op.tertiary.f32(i32 46, float %.i243, float %60, float %FMad25)  ; FMad(a,b,c)
  %76 = fadd fast float %FMad24, %61
  %77 = fmul fast float %63, %.i041
  %FMad22 = call float @dx.op.tertiary.f32(i32 46, float %.i142, float %64, float %77)  ; FMad(a,b,c)
  %FMad21 = call float @dx.op.tertiary.f32(i32 46, float %.i243, float %65, float %FMad22)  ; FMad(a,b,c)
  %78 = fadd fast float %FMad21, %66
  %79 = fmul fast float %53, %.i0
  %FMad19 = call float @dx.op.tertiary.f32(i32 46, float %.i1, float %54, float %79)  ; FMad(a,b,c)
  %FMad18 = call float @dx.op.tertiary.f32(i32 46, float %.i2, float %55, float %FMad19)  ; FMad(a,b,c)
  %80 = fadd fast float %FMad18, %56
  %81 = fmul fast float %58, %.i0
  %FMad16 = call float @dx.op.tertiary.f32(i32 46, float %.i1, float %59, float %81)  ; FMad(a,b,c)
  %FMad15 = call float @dx.op.tertiary.f32(i32 46, float %.i2, float %60, float %FMad16)  ; FMad(a,b,c)
  %82 = fadd fast float %FMad15, %61
  %83 = fmul fast float %63, %.i0
  %FMad13 = call float @dx.op.tertiary.f32(i32 46, float %.i1, float %64, float %83)  ; FMad(a,b,c)
  %FMad12 = call float @dx.op.tertiary.f32(i32 46, float %.i2, float %65, float %FMad13)  ; FMad(a,b,c)
  %84 = fadd fast float %FMad12, %66
  br label %85

; <label>:85                                      ; preds = %51, %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3"
  %tri.2.0.i0 = phi float [ %80, %51 ], [ %.i0, %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3" ]
  %tri.2.0.i1 = phi float [ %82, %51 ], [ %.i1, %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3" ]
  %tri.2.0.i2 = phi float [ %84, %51 ], [ %.i2, %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3" ]
  %tri.1.0.i0 = phi float [ %74, %51 ], [ %.i041, %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3" ]
  %tri.1.0.i1 = phi float [ %76, %51 ], [ %.i142, %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3" ]
  %tri.1.0.i2 = phi float [ %78, %51 ], [ %.i243, %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3" ]
  %tri.0.0.i0 = phi float [ %68, %51 ], [ %.i044, %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3" ]
  %tri.0.0.i1 = phi float [ %70, %51 ], [ %.i145, %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3" ]
  %tri.0.0.i2 = phi float [ %72, %51 ], [ %.i246, %"\01?GetIndex@@YA?AV?$vector@I$02@@I@Z.exit3" ]
  %86 = extractvalue %dx.types.CBufRet.i32 %7, 3
  %87 = add i32 %86, %1
  %88 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %LoadPrimitivesConstants_cbuffer, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.i32 %88, 0
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %"\01?GetOutputIndex@@YAII@Z.exit", label %91

; <label>:91                                      ; preds = %85
  %92 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %CachedSortBuffer_UAV_structbuf, i32 %87, i32 0)  ; BufferLoad(srv,index,wot)
  %93 = extractvalue %dx.types.ResRet.i32 %92, 0
  br label %"\01?GetOutputIndex@@YAII@Z.exit"

"\01?GetOutputIndex@@YAII@Z.exit":                ; preds = %91, %85
  %.0 = phi i32 [ %93, %91 ], [ %87, %85 ]
  %.i047 = bitcast float %tri.0.0.i0 to i32
  %.i148 = bitcast float %tri.0.0.i1 to i32
  %.i249 = bitcast float %tri.0.0.i2 to i32
  %.i3 = bitcast float %tri.1.0.i0 to i32
  %.i050 = bitcast float %tri.1.0.i1 to i32
  %.i151 = bitcast float %tri.1.0.i2 to i32
  %.i252 = bitcast float %tri.2.0.i0 to i32
  %.i353 = bitcast float %tri.2.0.i1 to i32
  %94 = bitcast float %tri.2.0.i2 to i32
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %PrimitiveBuffer_UAV_structbuf, i32 %.0, i32 0, i32 1, i32 undef, i32 undef, i32 undef, i8 1)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %PrimitiveBuffer_UAV_structbuf, i32 %.0, i32 4, i32 %.i047, i32 %.i148, i32 %.i249, i32 %.i3, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %PrimitiveBuffer_UAV_structbuf, i32 %.0, i32 20, i32 %.i050, i32 %.i151, i32 %.i252, i32 %.i353, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %PrimitiveBuffer_UAV_structbuf, i32 %.0, i32 36, i32 %94, i32 undef, i32 undef, i32 undef, i8 1)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %95 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %LoadPrimitivesConstants_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %96 = extractvalue %dx.types.CBufRet.i32 %95, 1
  %97 = extractvalue %dx.types.CBufRet.i32 %95, 3
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %MetadataBuffer_UAV_structbuf, i32 %.0, i32 0, i32 %96, i32 undef, i32 undef, i32 undef, i8 1)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %MetadataBuffer_UAV_structbuf, i32 %.0, i32 4, i32 %1, i32 undef, i32 undef, i32 undef, i8 1)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %MetadataBuffer_UAV_structbuf, i32 %.0, i32 8, i32 %97, i32 undef, i32 undef, i32 undef, i8 1)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %98

; <label>:98                                      ; preds = %"\01?GetOutputIndex@@YAII@Z.exit", %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!19, !54}
!dx.entryPoints = !{!58}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 3}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{!5, !10, !17, null}
!5 = !{!6, !7, !8}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"elementBuffer", i32 0, i32 0, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %struct.ByteAddressBuffer* undef, !"indexBuffer", i32 0, i32 1, i32 1, i32 11, i32 0, null}
!8 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"TransformBuffer", i32 0, i32 2, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 16}
!10 = !{!11, !13, !15}
!11 = !{i32 0, %"class.RWStructuredBuffer<Primitive>"* undef, !"PrimitiveBuffer", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !12}
!12 = !{i32 1, i32 40}
!13 = !{i32 1, %"class.RWStructuredBuffer<PrimitiveMetaData>"* undef, !"MetadataBuffer", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !14}
!14 = !{i32 1, i32 12}
!15 = !{i32 2, %"class.RWStructuredBuffer<unsigned int>"* undef, !"CachedSortBuffer", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !16}
!16 = !{i32 1, i32 4}
!17 = !{!18}
!18 = !{i32 0, %LoadPrimitivesConstants* undef, !"LoadPrimitivesConstants", i32 0, i32 0, i32 1, i32 36, null}
!19 = !{i32 0, %"class.RWStructuredBuffer<Primitive>" undef, !20, %struct.Primitive undef, !22, %"class.RWStructuredBuffer<PrimitiveMetaData>" undef, !27, %struct.PrimitiveMetaData undef, !28, %"class.RWStructuredBuffer<unsigned int>" undef, !32, %struct.ByteAddressBuffer undef, !34, %"class.StructuredBuffer<vector<float, 4> >" undef, !36, %struct.LoadPrimitivesInputConstants undef, !38, %struct.Triangle undef, !48, %LoadPrimitivesConstants undef, !52}
!20 = !{i32 52, !21}
!21 = !{i32 6, !"h", i32 3, i32 0}
!22 = !{i32 52, !23, !24, !25, !26}
!23 = !{i32 6, !"PrimitiveType", i32 3, i32 0, i32 7, i32 5}
!24 = !{i32 6, !"data0", i32 3, i32 16, i32 7, i32 5}
!25 = !{i32 6, !"data1", i32 3, i32 32, i32 7, i32 5}
!26 = !{i32 6, !"data2", i32 3, i32 48, i32 7, i32 5}
!27 = !{i32 12, !21}
!28 = !{i32 12, !29, !30, !31}
!29 = !{i32 6, !"GeometryContributionToHitGroupIndex", i32 3, i32 0, i32 7, i32 5}
!30 = !{i32 6, !"PrimitiveIndex", i32 3, i32 4, i32 7, i32 5}
!31 = !{i32 6, !"GeometryFlags", i32 3, i32 8, i32 7, i32 5}
!32 = !{i32 4, !33}
!33 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 5}
!34 = !{i32 4, !35}
!35 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 4}
!36 = !{i32 16, !37}
!37 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 9}
!38 = !{i32 36, !39, !40, !41, !42, !43, !44, !45, !46, !47}
!39 = !{i32 6, !"ElementBufferStride", i32 3, i32 0, i32 7, i32 5}
!40 = !{i32 6, !"IndexBufferOffset", i32 3, i32 4, i32 7, i32 5}
!41 = !{i32 6, !"NumPrimitivesBound", i32 3, i32 8, i32 7, i32 5}
!42 = !{i32 6, !"PrimitiveOffset", i32 3, i32 12, i32 7, i32 5}
!43 = !{i32 6, !"TotalPrimitiveCount", i32 3, i32 16, i32 7, i32 5}
!44 = !{i32 6, !"GeometryContributionToHitGroupIndex", i32 3, i32 20, i32 7, i32 5}
!45 = !{i32 6, !"HasValidTransform", i32 3, i32 24, i32 7, i32 5}
!46 = !{i32 6, !"GeometryFlags", i32 3, i32 28, i32 7, i32 5}
!47 = !{i32 6, !"PerformUpdate", i32 3, i32 32, i32 7, i32 5}
!48 = !{i32 44, !49, !50, !51}
!49 = !{i32 6, !"v0", i32 3, i32 0, i32 7, i32 9}
!50 = !{i32 6, !"v1", i32 3, i32 16, i32 7, i32 9}
!51 = !{i32 6, !"v2", i32 3, i32 32, i32 7, i32 9}
!52 = !{i32 36, !53}
!53 = !{i32 6, !"Constants", i32 3, i32 0}
!54 = !{i32 1, void ()* @main, !55}
!55 = !{!56}
!56 = !{i32 0, !57, !57}
!57 = !{}
!58 = !{void ()* @main, !"main", null, !4, !59}
!59 = !{i32 0, i64 16, i32 4, !60}
!60 = !{i32 64, i32 1, i32 1}
!61 = !{!62, !62, i64 0}
!62 = !{!"int", !63, i64 0}
!63 = !{!"omnipotent char", !64, i64 0}
!64 = !{!"Simple C/C++ TBAA"}

#endif

const unsigned char g_pLoadTrianglesFromR16IndexBuffer[] = {
  0x44, 0x58, 0x42, 0x43, 0x2a, 0x1b, 0xea, 0xee, 0xf1, 0xfd, 0x3d, 0x0c,
  0x78, 0xc2, 0x16, 0x30, 0xdf, 0x41, 0xf0, 0xf3, 0x01, 0x00, 0x00, 0x00,
  0x9c, 0x14, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x18, 0x01, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0xac, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x7c, 0x13, 0x00, 0x00,
  0x60, 0x00, 0x05, 0x00, 0xdf, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x64, 0x13, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xd6, 0x04, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d,
  0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x01, 0xd5, 0x06, 0x62,
  0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00,
  0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84,
  0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c,
  0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xcc, 0xc1, 0x1c, 0x01, 0x18, 0x0c, 0x23,
  0x10, 0xc0, 0x41, 0xd2, 0x14, 0x51, 0xc2, 0xe4, 0xa7, 0x11, 0xc2, 0x20,
  0x13, 0x52, 0x11, 0x88, 0x00, 0x82, 0x00, 0x98, 0x69, 0x0c, 0xc6, 0x81,
  0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x64, 0xe1, 0x16, 0x66, 0x81,
  0x1e, 0xe4, 0xa1, 0x1e, 0xc6, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x81,
  0x1c, 0x44, 0xa1, 0x1e, 0xcc, 0xc1, 0x1c, 0xca, 0x41, 0x1e, 0xf8, 0x00,
  0x16, 0xe4, 0x21, 0x1d, 0xda, 0x21, 0x1d, 0xe8, 0x21, 0x1d, 0xec, 0xa1,
  0x1c, 0xfc, 0x00, 0x05, 0x02, 0x0d, 0x87, 0x49, 0x53, 0x44, 0x09, 0x93,
  0x9f, 0x46, 0x08, 0x83, 0x4c, 0x48, 0x45, 0x98, 0xc4, 0x04, 0x74, 0xc0,
  0x04, 0xa0, 0x01, 0x00, 0x80, 0x99, 0xd6, 0x60, 0x1c, 0xd8, 0x21, 0x1c,
  0xe6, 0x61, 0x1e, 0xdc, 0x40, 0x16, 0x6e, 0x61, 0x16, 0xe8, 0x41, 0x1e,
  0xea, 0x61, 0x1c, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xc8, 0x41, 0x14,
  0xea, 0xc1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0x81, 0x0f, 0x60, 0x41, 0x1e,
  0xd2, 0xa1, 0x1d, 0xd2, 0x81, 0x1e, 0xd2, 0xc1, 0x1e, 0xca, 0xa1, 0x15,
  0xca, 0x81, 0x1e, 0xc2, 0x81, 0x14, 0xc2, 0x81, 0x1e, 0xc2, 0xc1, 0x0f,
  0x50, 0x50, 0x90, 0x31, 0x93, 0x19, 0x8c, 0x03, 0x3b, 0x84, 0xc3, 0x3c,
  0xcc, 0x83, 0x1b, 0xc8, 0xc2, 0x2d, 0xcc, 0x02, 0x3d, 0xc8, 0x43, 0x3d,
  0x8c, 0x03, 0x3d, 0xd4, 0x83, 0x3c, 0x94, 0x03, 0x39, 0x88, 0x42, 0x3d,
  0x98, 0x83, 0x39, 0x94, 0x83, 0x3c, 0xf0, 0x41, 0x3d, 0xb8, 0xc3, 0x3c,
  0xa4, 0xc3, 0x39, 0xb8, 0x43, 0x39, 0x90, 0x03, 0x18, 0xa4, 0x83, 0x3b,
  0xd0, 0x83, 0x1f, 0xa0, 0x00, 0x20, 0xe4, 0x30, 0x69, 0x8a, 0x28, 0x61,
  0xf2, 0x37, 0x6c, 0x22, 0xb4, 0x61, 0x88, 0x08, 0x49, 0xda, 0xa8, 0xa2,
  0x20, 0x22, 0x14, 0x00, 0xa4, 0xcc, 0x00, 0x0c, 0x23, 0x10, 0xcc, 0x4c,
  0x69, 0x30, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x30, 0x0b,
  0xf4, 0x20, 0x0f, 0xf5, 0x30, 0x0e, 0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e,
  0xe4, 0x20, 0x0a, 0xf5, 0x60, 0x0e, 0xe6, 0x50, 0x0e, 0xf2, 0xc0, 0x07,
  0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e,
  0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0, 0x07,
  0x60, 0xe0, 0x07, 0x28, 0x68, 0xc8, 0xb9, 0x31, 0x90, 0xa6, 0x88, 0x12,
  0x26, 0xbf, 0x74, 0x80, 0x21, 0x8d, 0x10, 0x06, 0x99, 0x90, 0x8a, 0x90,
  0xc4, 0xe6, 0xa1, 0x26, 0xce, 0x69, 0xa4, 0x09, 0x68, 0x26, 0x09, 0x25,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x5d, 0xa5, 0x03, 0x0c, 0x69,
  0x84, 0x30, 0xc8, 0x84, 0x54, 0x84, 0xc4, 0x39, 0x8d, 0x34, 0x01, 0xcd,
  0x24, 0xa1, 0x00, 0xa2, 0x68, 0x04, 0xa0, 0x04, 0x13, 0x51, 0x65, 0x00,
  0x00, 0x80, 0xac, 0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e,
  0xa3, 0x8a, 0x95, 0x98, 0x7c, 0xe4, 0xb6, 0x11, 0x01, 0x00, 0x00, 0x30,
  0x47, 0x80, 0x50, 0x76, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f,
  0x02, 0xcd, 0xb0, 0x10, 0x28, 0xd0, 0x0a, 0x81, 0x01, 0x1b, 0x40, 0x5c,
  0x29, 0x18, 0x80, 0x61, 0x18, 0xf2, 0xe6, 0x08, 0x82, 0x62, 0x6c, 0x40,
  0x06, 0x00, 0x20, 0x85, 0x37, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9,
  0x2b, 0x21, 0xad, 0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x0a, 0x86, 0x61, 0x18,
  0xa0, 0x14, 0x23, 0xb0, 0x01, 0x00, 0x91, 0x45, 0x99, 0x80, 0x0d, 0x00,
  0x00, 0x00, 0x00, 0x32, 0x32, 0x6f, 0x1a, 0x2e, 0x7f, 0xc2, 0x1e, 0x42,
  0xf2, 0x57, 0x42, 0x5a, 0x89, 0xc9, 0x47, 0x6e, 0x1b, 0x15, 0x00, 0x00,
  0x00, 0x40, 0x29, 0x50, 0x60, 0x03, 0x00, 0x4a, 0x07, 0x02, 0x86, 0x11,
  0x06, 0xe6, 0x1e, 0x69, 0x8a, 0x28, 0x61, 0xf2, 0xdb, 0x08, 0x01, 0x1a,
  0x63, 0x21, 0xd0, 0xc0, 0xb2, 0xec, 0x1c, 0x01, 0x28, 0xa4, 0x00, 0x40,
  0xef, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0,
  0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74,
  0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6,
  0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78,
  0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x3a, 0x0f, 0xa4, 0x90, 0x21, 0x23, 0x45, 0x44, 0x00, 0x8e,
  0x01, 0x00, 0xd3, 0x0c, 0x00, 0x98, 0x68, 0x00, 0xc0, 0x54, 0x03, 0x00,
  0xa6, 0x1a, 0x00, 0x30, 0xdd, 0x00, 0x80, 0x19, 0x07, 0x00, 0x30, 0xe4,
  0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0xc8, 0x63, 0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x90, 0x87, 0x03, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x21, 0x8f, 0x07, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x43, 0x9e, 0x30, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x0f, 0x19, 0x00, 0x01, 0x20, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xc7, 0x0c, 0x80, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x93, 0x06,
  0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x05,
  0x02, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x02,
  0x4a, 0x60, 0x04, 0xa0, 0x0c, 0x8a, 0xa1, 0x2c, 0x8a, 0xa0, 0x30, 0x0a,
  0xa4, 0xa0, 0x0a, 0xa1, 0x90, 0x0a, 0xad, 0x1c, 0x4a, 0xa1, 0x80, 0x0a,
  0xac, 0x20, 0x4a, 0xa2, 0x50, 0x0a, 0xa6, 0x70, 0x0a, 0xab, 0x00, 0x03,
  0xc8, 0x1d, 0x01, 0x28, 0x10, 0x02, 0x47, 0x00, 0xa8, 0x98, 0x01, 0x20,
  0x63, 0x06, 0x80, 0x8e, 0x19, 0x00, 0x42, 0x66, 0x00, 0x28, 0x99, 0x01,
  0x20, 0x65, 0x06, 0x80, 0x96, 0x19, 0x00, 0x72, 0x66, 0x00, 0xe8, 0x99,
  0x01, 0x20, 0x68, 0x06, 0x80, 0xa2, 0x19, 0x00, 0x92, 0x66, 0x00, 0x88,
  0x98, 0x01, 0xa0, 0x76, 0x06, 0x80, 0x86, 0x19, 0x00, 0x12, 0x66, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x2b, 0x01, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x83, 0x0c, 0x6f, 0x0c,
  0x24, 0xc6, 0x45, 0x66, 0x43, 0x10, 0x4c, 0x10, 0x80, 0x67, 0x82, 0x00,
  0x40, 0x1b, 0x84, 0x81, 0x98, 0x20, 0x00, 0xd1, 0x06, 0x61, 0x30, 0x28,
  0x8c, 0xcd, 0x4d, 0x10, 0x00, 0x69, 0xc3, 0x80, 0x24, 0xc4, 0x04, 0x61,
  0x79, 0x03, 0x36, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75,
  0x66, 0x66, 0x65, 0x72, 0x13, 0x04, 0x60, 0xda, 0x90, 0x10, 0x0b, 0x43,
  0x10, 0x43, 0x43, 0x00, 0x5c, 0xd2, 0xdc, 0xc8, 0xca, 0xf0, 0x84, 0xea,
  0xcc, 0xcc, 0xca, 0xe4, 0x36, 0x24, 0xc3, 0xf2, 0x10, 0xc3, 0xd0, 0x10,
  0xc0, 0x04, 0x01, 0xa0, 0x26, 0x08, 0x4f, 0x1c, 0xf0, 0xa1, 0x92, 0x0b,
  0x73, 0x9b, 0x33, 0x7b, 0x93, 0x6b, 0x13, 0xaa, 0x33, 0x33, 0x2b, 0x93,
  0x9b, 0x20, 0x00, 0xd5, 0x04, 0x01, 0xb0, 0x36, 0x08, 0x43, 0xb5, 0x21,
  0x89, 0xa4, 0x89, 0x88, 0x06, 0x8a, 0xb0, 0x36, 0x0c, 0x0e, 0x74, 0x4d,
  0x10, 0x88, 0x3a, 0xe0, 0x03, 0x25, 0x97, 0xd6, 0x96, 0x46, 0x97, 0x66,
  0x57, 0x26, 0x54, 0x67, 0x66, 0x56, 0x26, 0x37, 0x41, 0x00, 0x03, 0x34,
  0x98, 0x20, 0x00, 0xd7, 0x06, 0x61, 0xe0, 0x36, 0x2c, 0x44, 0xa6, 0x11,
  0xc4, 0x40, 0x6d, 0xdb, 0xd6, 0x4d, 0x10, 0x8e, 0x35, 0xa0, 0xd3, 0x54,
  0x46, 0x17, 0x46, 0x16, 0x46, 0x17, 0x26, 0x54, 0x67, 0x66, 0x56, 0x26,
  0xb7, 0x41, 0x18, 0xa8, 0x0d, 0xcb, 0xf0, 0x81, 0x01, 0x31, 0x0c, 0xd4,
  0xb6, 0x6d, 0x61, 0x30, 0x41, 0x48, 0xda, 0x80, 0xd0, 0x50, 0xd8, 0x18,
  0x5a, 0x19, 0xd9, 0xd4, 0x9b, 0x1c, 0x9d, 0x50, 0x9d, 0x99, 0x59, 0x99,
  0xdc, 0x04, 0x01, 0xc0, 0x36, 0x08, 0x43, 0x19, 0x6c, 0x58, 0xa2, 0x31,
  0x20, 0x03, 0x22, 0x1a, 0xa8, 0x6d, 0xdb, 0xcc, 0x60, 0xc3, 0xe0, 0x89,
  0xc1, 0x19, 0x4c, 0x10, 0x24, 0x3a, 0xe0, 0xc5, 0xf4, 0x16, 0x46, 0x06,
  0x25, 0x97, 0xd6, 0x96, 0x46, 0x97, 0x66, 0x57, 0x36, 0x37, 0xf4, 0xe6,
  0x36, 0x47, 0x17, 0xe6, 0x46, 0x37, 0x37, 0x41, 0x00, 0xb2, 0x0d, 0x08,
  0x91, 0x06, 0x6a, 0x40, 0x10, 0xc3, 0x1a, 0x00, 0x1b, 0x02, 0x36, 0xd8,
  0x40, 0x60, 0x68, 0xd0, 0x06, 0xc0, 0x04, 0x61, 0xb8, 0x83, 0x09, 0x02,
  0xa0, 0x31, 0x40, 0xdb, 0x40, 0x24, 0x71, 0x60, 0x10, 0x1b, 0x04, 0x38,
  0x90, 0x83, 0x09, 0x82, 0x80, 0x07, 0x6c, 0xa0, 0xe4, 0xd2, 0xda, 0xd2,
  0xe8, 0xd2, 0xec, 0xca, 0xa8, 0xf2, 0xe0, 0xca, 0x26, 0x08, 0xc0, 0x36,
  0x41, 0x00, 0xb8, 0x0d, 0x46, 0x52, 0x07, 0x06, 0x61, 0x07, 0x77, 0xc0,
  0x82, 0x2c, 0x8c, 0x2e, 0x0c, 0x66, 0x83, 0x91, 0xe4, 0x81, 0x51, 0xd9,
  0xc1, 0x1d, 0xb0, 0x20, 0x0b, 0xa3, 0x0b, 0x8b, 0x99, 0x20, 0x00, 0xdd,
  0x06, 0x23, 0xd9, 0x03, 0x83, 0x0f, 0xec, 0xe0, 0x0e, 0x58, 0x90, 0x85,
  0xd1, 0x85, 0xc9, 0x4c, 0x10, 0x00, 0x6f, 0x83, 0x91, 0xf8, 0x81, 0xf1,
  0x07, 0x76, 0x70, 0x07, 0x1b, 0x0a, 0x38, 0xc0, 0x03, 0x3d, 0xe8, 0x03,
  0x50, 0x98, 0x20, 0x18, 0x6a, 0xb0, 0x41, 0xa0, 0xe4, 0x60, 0x82, 0x50,
  0xa4, 0x01, 0xc7, 0xe0, 0xa8, 0xec, 0xad, 0xad, 0x8c, 0x4e, 0x2e, 0x6f,
  0xe8, 0xcd, 0x8d, 0x4e, 0x2e, 0x4d, 0xac, 0x8e, 0x2e, 0xed, 0xcd, 0x8d,
  0xea, 0x0d, 0x29, 0x8d, 0xee, 0x48, 0xee, 0xad, 0x0e, 0x2e, 0xc9, 0x8d,
  0xac, 0x0c, 0x6f, 0x83, 0x91, 0x94, 0x82, 0x41, 0xd8, 0xc1, 0x1d, 0xd0,
  0x81, 0x92, 0x4b, 0x6b, 0x4b, 0xa3, 0x4b, 0xb3, 0x2b, 0x4b, 0x72, 0x23,
  0x2b, 0xc3, 0xdb, 0x60, 0x24, 0xa7, 0x60, 0x94, 0x81, 0x1d, 0xdc, 0x01,
  0x9b, 0xa3, 0xb2, 0xb7, 0xb6, 0x32, 0x3a, 0xb9, 0x3c, 0x23, 0xb6, 0xb0,
  0xb3, 0xb9, 0x09, 0x02, 0xf0, 0x6d, 0x30, 0x92, 0x54, 0x30, 0x54, 0xc1,
  0x0e, 0xee, 0x60, 0x03, 0x41, 0x99, 0x02, 0x2a, 0xac, 0xc2, 0x04, 0x01,
  0x61, 0x83, 0x0d, 0x46, 0x12, 0x07, 0x06, 0x61, 0x07, 0x77, 0xb0, 0x41,
  0x28, 0x03, 0x57, 0x98, 0x20, 0x28, 0x6e, 0xb0, 0xc1, 0x48, 0xe2, 0xc0,
  0x20, 0xec, 0xa0, 0x0c, 0x36, 0x08, 0x65, 0x10, 0x0b, 0x13, 0x04, 0x07,
  0x0e, 0x26, 0x08, 0x00, 0x18, 0x6c, 0x30, 0x92, 0x38, 0x30, 0x08, 0x3b,
  0xa0, 0x85, 0x0d, 0x42, 0x55, 0x0b, 0x13, 0x04, 0x48, 0x0e, 0x38, 0x15,
  0xb1, 0x95, 0xb5, 0x95, 0xb9, 0xd1, 0x09, 0xd5, 0x99, 0x99, 0x95, 0xc9,
  0x4d, 0xd1, 0xc9, 0xa5, 0x91, 0x95, 0x6d, 0x30, 0x12, 0x5c, 0x30, 0x08,
  0x3b, 0xb8, 0x03, 0x46, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x66,
  0x66, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1b, 0x8c, 0x44,
  0x17, 0x8c, 0x32, 0xb0, 0x83, 0x3b, 0xa0, 0xe4, 0x54, 0xd7, 0x06, 0x25,
  0x97, 0xd6, 0x96, 0x46, 0x97, 0x66, 0x57, 0x36, 0x27, 0xf4, 0x56, 0xe7,
  0x46, 0xb6, 0xc1, 0x48, 0x78, 0xc1, 0x50, 0x05, 0x3b, 0xb8, 0x03, 0x3e,
  0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x66,
  0x73, 0x65, 0x74, 0x1b, 0x8c, 0xc4, 0x17, 0x0c, 0xca, 0x0e, 0xee, 0x80,
  0x13, 0xd5, 0x1b, 0x5d, 0x18, 0x1b, 0x94, 0x5c, 0x5a, 0x5b, 0x1a, 0x5d,
  0x9a, 0x5d, 0xd9, 0xd0, 0x5b, 0x9d, 0x1b, 0xdd, 0x06, 0x23, 0x01, 0x07,
  0xa3, 0xb2, 0x83, 0x3b, 0x98, 0x20, 0x00, 0x61, 0xb0, 0xc1, 0x48, 0x4a,
  0xc1, 0x10, 0x07, 0x3b, 0xb8, 0x03, 0x46, 0x48, 0x61, 0x73, 0x56, 0x61,
  0x6c, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
  0x13, 0x04, 0x40, 0x0c, 0x36, 0x18, 0x09, 0x39, 0x18, 0xe5, 0x60, 0x07,
  0x77, 0x30, 0x41, 0x00, 0xc6, 0x60, 0x83, 0x91, 0xa4, 0x82, 0x71, 0x0e,
  0x76, 0x70, 0x07, 0x6c, 0xa0, 0xca, 0xe4, 0xcc, 0xde, 0xe4, 0xda, 0xaa,
  0xe0, 0xc8, 0xc2, 0xe8, 0xca, 0x36, 0x18, 0x49, 0x3a, 0x18, 0x7c, 0x60,
  0x07, 0x77, 0xb0, 0x41, 0x59, 0x83, 0x5c, 0xd8, 0x85, 0x5e, 0xf8, 0x85,
  0x70, 0x18, 0x07, 0x73, 0x40, 0x07, 0x75, 0x98, 0x20, 0xb4, 0x81, 0x1d,
  0x4c, 0x10, 0x00, 0x32, 0xa0, 0x60, 0x07, 0xb3, 0xc1, 0x48, 0xdc, 0xc1,
  0x20, 0xec, 0x80, 0x16, 0x28, 0xd8, 0xc5, 0x6c, 0x30, 0x12, 0x78, 0x30,
  0x2a, 0x3b, 0xa0, 0x05, 0x0a, 0x76, 0x32, 0x1b, 0x8c, 0x44, 0x1e, 0x0c,
  0x3e, 0xb0, 0x03, 0x5a, 0xd8, 0x40, 0xb4, 0xc3, 0x3b, 0xc4, 0xc3, 0x3c,
  0x4c, 0x10, 0xa2, 0x39, 0x60, 0x32, 0xf4, 0xe6, 0x36, 0x47, 0x17, 0xe6,
  0x46, 0x37, 0xb7, 0x81, 0x48, 0xec, 0xc1, 0x20, 0x36, 0x08, 0x6b, 0x70,
  0x0f, 0x1b, 0x2a, 0xe2, 0x0d, 0xe6, 0x80, 0x0e, 0x42, 0x41, 0x14, 0x46,
  0x81, 0x14, 0x58, 0xa1, 0x15, 0x5e, 0x01, 0x16, 0x64, 0x61, 0x16, 0x6c,
  0xe1, 0x16, 0xd6, 0x81, 0x1d, 0xe8, 0xa1, 0x1e, 0xf0, 0x61, 0x82, 0x50,
  0x1d, 0x1b, 0x80, 0x0d, 0x03, 0xb1, 0x0f, 0xfb, 0xb0, 0x21, 0xe0, 0x87,
  0x0d, 0xc3, 0xa0, 0x0f, 0xfd, 0x40, 0xa2, 0x2d, 0x2c, 0xcd, 0x6d, 0x82,
  0xe0, 0x06, 0x67, 0x30, 0x41, 0x00, 0xca, 0x60, 0xc3, 0x10, 0x12, 0xc3,
  0xb0, 0x81, 0x20, 0x40, 0xa2, 0x0c, 0x44, 0x62, 0x43, 0xa1, 0x0f, 0xff,
  0x00, 0xb8, 0xc1, 0x48, 0x70, 0x48, 0x73, 0xa3, 0xe3, 0xf3, 0xd6, 0xe6,
  0x96, 0x06, 0xf7, 0x46, 0x57, 0xe6, 0x46, 0x07, 0x32, 0x86, 0x16, 0x26,
  0xc7, 0x68, 0x2a, 0xad, 0x0d, 0x8e, 0xad, 0x0c, 0x64, 0xe8, 0x65, 0x68,
  0x65, 0x05, 0x84, 0x4a, 0x28, 0x28, 0x68, 0x43, 0x70, 0x12, 0x13, 0x04,
  0x37, 0x30, 0x83, 0x0d, 0x83, 0x49, 0xa0, 0x44, 0x4a, 0x6c, 0x18, 0x4a,
  0x42, 0x25, 0x52, 0x62, 0xc3, 0xb0, 0x12, 0x2b, 0x91, 0x12, 0x55, 0xd8,
  0xd8, 0xec, 0xda, 0x5c, 0xd2, 0xc8, 0xca, 0xdc, 0xe8, 0xa6, 0x04, 0x41,
  0x15, 0x32, 0x3c, 0x17, 0xbb, 0x32, 0xb9, 0xb9, 0xb4, 0x37, 0xb7, 0x29,
  0x01, 0xd1, 0x84, 0x0c, 0xcf, 0xc5, 0x2e, 0x8c, 0xcd, 0xae, 0x4c, 0x6e,
  0x4a, 0x60, 0xd4, 0x21, 0xc3, 0x73, 0x99, 0x43, 0x0b, 0x23, 0x2b, 0x93,
  0x6b, 0x7a, 0x23, 0x2b, 0x63, 0x9b, 0x12, 0x24, 0x65, 0xc8, 0xf0, 0x5c,
  0xe4, 0xca, 0xe6, 0xde, 0xea, 0xe4, 0xc6, 0xca, 0xe6, 0xa6, 0x04, 0x6d,
  0x50, 0x89, 0x0c, 0xcf, 0x85, 0x2e, 0x0f, 0xae, 0x2c, 0xc8, 0xcd, 0xed,
  0x8d, 0x2e, 0x8c, 0x2e, 0xed, 0xcd, 0x6d, 0x6e, 0x8a, 0x80, 0x0f, 0xfd,
  0x50, 0x87, 0x0c, 0xcf, 0xa5, 0xcc, 0x8d, 0x4e, 0x2e, 0x0f, 0xea, 0x2d,
  0xcd, 0x8d, 0x6e, 0x6e, 0x4a, 0x30, 0x12, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x8c, 0xcc, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x74, 0x60, 0x07,
  0x37, 0x90, 0x87, 0x72, 0x98, 0x87, 0x77, 0xa8, 0x07, 0x79, 0x18, 0x87,
  0x72, 0x70, 0x83, 0x70, 0xa0, 0x07, 0x7a, 0x90, 0x87, 0x74, 0x10, 0x87,
  0x7a, 0xa0, 0x87, 0x72, 0x00, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x6c, 0x00, 0x00, 0x00, 0x35, 0x70, 0x06, 0x81, 0x5f, 0x99, 0x5d, 0x6e,
  0x97, 0xdd, 0x74, 0x61, 0xdd, 0x6c, 0x2e, 0xcb, 0x81, 0xc0, 0x59, 0x55,
  0x98, 0xa7, 0x97, 0x83, 0x64, 0xb2, 0xbc, 0x3c, 0x9f, 0x0b, 0xeb, 0x66,
  0x73, 0x59, 0x0e, 0x04, 0x06, 0x4d, 0x41, 0x1a, 0x2e, 0xdf, 0x79, 0xfc,
  0x89, 0x88, 0x26, 0x04, 0x88, 0x30, 0xbf, 0xb8, 0xed, 0x02, 0xc8, 0x83,
  0xc0, 0x0f, 0x2a, 0x4f, 0xb7, 0xd3, 0xf4, 0xb4, 0xbd, 0x2c, 0xac, 0x9b,
  0xcd, 0x65, 0x39, 0x10, 0x38, 0xb3, 0xfe, 0x48, 0xd2, 0xeb, 0x94, 0x2e,
  0xaf, 0x8f, 0xe9, 0x75, 0x79, 0x99, 0x2c, 0xac, 0x9b, 0xcd, 0x65, 0x39,
  0xb0, 0x0a, 0x95, 0xa7, 0xdb, 0x69, 0x7a, 0xda, 0x5e, 0x06, 0x02, 0x81,
  0xc0, 0xa0, 0x2d, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30,
  0x11, 0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x0e, 0xd4, 0x70, 0xf9, 0xce, 0xe3,
  0x07, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x83, 0x8f, 0xdc, 0x76, 0x05,
  0x80, 0x42, 0xe0, 0xd7, 0x2c, 0xd3, 0xc3, 0xe4, 0x30, 0x3d, 0x2c, 0xac,
  0x9b, 0xcd, 0x65, 0x39, 0x10, 0x38, 0xb3, 0xfe, 0x48, 0xd2, 0xeb, 0x94,
  0x2e, 0xaf, 0x8f, 0xe9, 0x75, 0x79, 0x99, 0x2c, 0xac, 0x9b, 0xcd, 0x65,
  0x39, 0xb0, 0x0a, 0x95, 0xa7, 0xdb, 0x69, 0x7a, 0xda, 0x5e, 0x6e, 0x96,
  0xe9, 0x61, 0x62, 0x98, 0x1e, 0x06, 0x02, 0x81, 0xc0, 0xa0, 0x25, 0x6c,
  0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00,
  0x43, 0x49, 0x18, 0x80, 0x80, 0xf9, 0xc8, 0x6d, 0x57, 0xc1, 0x1e, 0x04,
  0x7e, 0x54, 0x79, 0xd8, 0x3d, 0x37, 0xbf, 0xe5, 0x6d, 0x61, 0xdd, 0x6c,
  0x2e, 0xcb, 0x81, 0xc0, 0x99, 0xf5, 0x47, 0x9a, 0xd2, 0xe5, 0xf5, 0x31,
  0xbd, 0x2e, 0x2f, 0x93, 0x85, 0x75, 0xb3, 0xb9, 0x2c, 0x07, 0x5a, 0x7f,
  0x24, 0x7b, 0x79, 0x4c, 0x7f, 0xcb, 0x81, 0x4d, 0x12, 0x6c, 0x06, 0x04,
  0x02, 0x81, 0x41, 0x43, 0x90, 0x86, 0xcb, 0x77, 0x1e, 0x7f, 0x3a, 0x22,
  0x02, 0x18, 0xc4, 0xc1, 0x47, 0x6e, 0xdb, 0x0e, 0x08, 0x06, 0x40, 0x9a,
  0x12, 0x78, 0x83, 0xc0, 0x6f, 0x18, 0x1e, 0xa3, 0xcb, 0xe4, 0xe9, 0x5b,
  0x4e, 0x17, 0xd6, 0xcd, 0xe6, 0xb2, 0x1c, 0x08, 0x9c, 0x59, 0x7f, 0x24,
  0xe9, 0x75, 0x4a, 0x97, 0xd7, 0xc7, 0xf4, 0xba, 0xbc, 0x4c, 0x16, 0xd6,
  0xcd, 0xe6, 0xb2, 0x1c, 0x98, 0x04, 0x02, 0x83, 0x66, 0x70, 0x95, 0x0e,
  0x30, 0xa4, 0x11, 0xc2, 0x20, 0x13, 0x52, 0x11, 0x12, 0xe7, 0x34, 0xd2,
  0x04, 0x34, 0x93, 0x64, 0x0c, 0xd4, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x54,
  0x51, 0x10, 0x51, 0xe9, 0x00, 0x83, 0x5f, 0xdc, 0x76, 0x11, 0x94, 0x41,
  0xe0, 0x97, 0x76, 0x93, 0xcb, 0x78, 0x61, 0xdd, 0x6c, 0x2e, 0xcb, 0x81,
  0xc0, 0x59, 0x55, 0x98, 0xa7, 0x97, 0x83, 0x64, 0xb2, 0xbc, 0x3c, 0x9f,
  0x0b, 0xeb, 0x66, 0x73, 0x59, 0x0e, 0x04, 0x06, 0xad, 0xa1, 0x1a, 0x2e,
  0xdf, 0x79, 0xfc, 0x80, 0x2a, 0x0a, 0x22, 0x62, 0x27, 0x27, 0x22, 0x7c,
  0xe4, 0xb6, 0x01, 0x00, 0x61, 0x20, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00,
  0x13, 0x04, 0x47, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x04, 0xcc, 0x00, 0x14, 0x57, 0x21, 0x06, 0x94, 0x5c, 0x29, 0x06, 0x94,
  0x5d, 0xf9, 0xff, 0x1f, 0x94, 0x6e, 0x40, 0x15, 0x50, 0x56, 0x02, 0x23,
  0x00, 0xe5, 0x51, 0x04, 0x00, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x10, 0x06, 0x7b, 0xa0, 0x10, 0x72, 0x20, 0x07, 0xde, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x84, 0x01, 0x1f, 0x2c, 0x05, 0x1e, 0xe0,
  0xc1, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x61, 0xd0, 0x07, 0x8c,
  0x81, 0x07, 0x78, 0x00, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x10,
  0x06, 0x7e, 0xd0, 0x18, 0x75, 0x50, 0x07, 0x61, 0x30, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x61, 0xf0, 0x07, 0xce, 0xb1, 0x07, 0x7b, 0x20, 0x06,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x10, 0x06, 0xa0, 0xf0, 0x20, 0x7b,
  0xb0, 0x07, 0x63, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x61, 0x10,
  0x0a, 0xd0, 0xc1, 0x07, 0x7c, 0x40, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0x60, 0x95, 0x42, 0xd3, 0x07, 0x33, 0x11, 0x6f, 0x00, 0x3c, 0xa3,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x9c, 0x29, 0x44, 0xc3, 0x1f,
  0x8c, 0x26, 0x04, 0xc2, 0x70, 0x03, 0x11, 0x90, 0xc1, 0x2c, 0x43, 0x60,
  0x04, 0x55, 0x80, 0x82, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0xa7,
  0x0a, 0xd5, 0x31, 0x0a, 0xa3, 0x09, 0x41, 0x50, 0xc1, 0x00, 0x15, 0x94,
  0x82, 0x0e, 0x37, 0x04, 0xa3, 0x00, 0x06, 0x35, 0x5c, 0x30, 0xdd, 0x10,
  0x10, 0xc2, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0xa4, 0x01, 0x2b, 0x7c,
  0x50, 0x10, 0x06, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xfb, 0x1d,
  0x9e, 0x56, 0x68, 0x85, 0x61, 0x03, 0x22, 0x18, 0x06, 0x60, 0xbf, 0x03,
  0xe4, 0x0a, 0xaf, 0x30, 0x6c, 0x40, 0x04, 0xc3, 0x00, 0x14, 0x91, 0x0a,
  0x58, 0x45, 0x18, 0xe8, 0x74, 0x83, 0x10, 0x28, 0xd3, 0x0d, 0xae, 0x30,
  0x0b, 0x4b, 0x05, 0xb4, 0x80, 0xeb, 0x1d, 0x2c, 0x5a, 0x08, 0x28, 0x00,
  0x46, 0x11, 0xb7, 0xa0, 0xc3, 0x0d, 0xc1, 0x2d, 0x80, 0x41, 0x0d, 0x69,
  0xa0, 0x45, 0xcc, 0x02, 0x4e, 0x37, 0x08, 0xc1, 0x50, 0x0f, 0x1b, 0x68,
  0x41, 0xb6, 0x80, 0xd3, 0x0d, 0x81, 0x60, 0x8d, 0x26, 0x6c, 0x40, 0x05,
  0x8e, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x1a, 0x88, 0x43, 0x1d,
  0x94, 0x41, 0x70, 0x07, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3,
  0x09, 0x83, 0x70, 0x03, 0xb3, 0x37, 0x30, 0x7b, 0x03, 0xb3, 0x95, 0x34,
  0x32, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x69, 0xa0, 0x0e, 0x7d, 0xd0,
  0x06, 0xc1, 0x1f, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0xc2, 0x0d, 0xcc, 0xde, 0xc0, 0xec, 0x0d, 0xcc, 0x56, 0x24, 0xc9,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0xa4, 0x81, 0x3c, 0x94, 0x42, 0x1d,
  0x04, 0xa7, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0x37, 0x30, 0x7b, 0x03, 0xb3, 0x37, 0x30, 0x3b, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x9c, 0x3f, 0xa4, 0xc2, 0x1e, 0xe0, 0xc3, 0x68, 0x42,
  0x20, 0x0c, 0x37, 0x04, 0xf9, 0x00, 0x06, 0xb3, 0x0c, 0x83, 0x10, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x01, 0x19, 0xf8, 0xc3, 0x2b, 0x84, 0x82,
  0x3e, 0xe8, 0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x90,
  0xc1, 0x48, 0xd0, 0x82, 0x29, 0x80, 0xc4, 0x3f, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x01, 0x19, 0xa0, 0x44, 0x2e, 0xac, 0x02, 0x48,
  0x90, 0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20,
  0x8c, 0x26, 0x10, 0x83, 0x39, 0x65, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xf0, 0x60, 0x02, 0x1c, 0xca, 0xc0, 0x09, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0xc0, 0x8b, 0x89, 0x70, 0x28, 0x03, 0x27, 0xb0, 0xc0,
  0x81, 0x8e, 0x35, 0x69, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xf0, 0x68, 0x82, 0x1c, 0xd2, 0xa0, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0xc0, 0xab, 0x89, 0x72, 0x48, 0x83, 0x26, 0xb0, 0xa0, 0x81, 0x8e,
  0x31, 0x6d, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xf0, 0x70,
  0x02, 0x1d, 0xda, 0x80, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xc0,
  0xcb, 0x89, 0x74, 0x68, 0x03, 0x26, 0xb0, 0x80, 0x81, 0x8e, 0x69, 0x69,
  0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xf0, 0x78, 0x82, 0x1d,
  0xd2, 0x40, 0x0b, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xc0, 0xeb, 0x89,
  0x76, 0x48, 0x03, 0x2d, 0xb0, 0x40, 0x83, 0x8e, 0x65, 0x6d, 0x20, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xf0, 0xc0, 0x02, 0x1e, 0xda, 0x20,
  0x0b, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xc0, 0x0b, 0x8b, 0x78, 0x68,
  0x83, 0x2c, 0xb0, 0x20, 0x83, 0x8e, 0x61, 0x71, 0x20, 0x9f, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xf0, 0xc8, 0x82, 0x1e, 0xe2, 0x00, 0x0b, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0xc0, 0x2b, 0x8b, 0x7a, 0x88, 0x03, 0x2c,
  0xb0, 0x00, 0x83, 0x8e, 0x99, 0x41, 0x1b, 0xc8, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x3c, 0xb4, 0xc0, 0x87, 0x36, 0x30, 0x83, 0x60, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0xbc, 0xb4, 0xc8, 0x87, 0x36, 0x30, 0x83,
  0xc0, 0x02, 0x33, 0x80, 0x8e, 0x95, 0x41, 0x1c, 0xc8, 0x67, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0x3c, 0xb6, 0xe0, 0x87, 0x38, 0x28, 0x83, 0x60,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xbc, 0xb6, 0xe8, 0x87, 0x38, 0x28,
  0x83, 0xc0, 0x82, 0x32, 0x80, 0x8e, 0x91, 0x41, 0x1d, 0xc8, 0x67, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0x3c, 0xb8, 0x00, 0x89, 0x3a, 0x20, 0x83,
  0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xbc, 0xb8, 0x08, 0x89, 0x3a,
  0x20, 0x83, 0xc0, 0x02, 0x32, 0x80, 0xce, 0x2c, 0xc1, 0x30, 0x50, 0xc1,
  0x48, 0x82, 0x3c, 0x04, 0x03, 0x15, 0x0c, 0x23, 0xc8, 0x43, 0x30, 0x50,
  0xc1, 0x18, 0x82, 0x3c, 0x04, 0x03, 0x15, 0x0c, 0x1c, 0x08, 0x28, 0x11,
  0x0c, 0x54, 0x30, 0x6a, 0x20, 0xa0, 0x44, 0x30, 0x50, 0xc1, 0x90, 0x81,
  0x80, 0x12, 0xc1, 0x40, 0x05, 0xe3, 0x0a, 0x82, 0x4f, 0x04, 0x03, 0x15,
  0x0c, 0x2a, 0x08, 0x3e, 0x11, 0x0c, 0x54, 0x30, 0xa2, 0x20, 0xf8, 0x44,
  0x30, 0x9a, 0x30, 0x0f, 0x43, 0x05, 0xfa, 0x00, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0xc0, 0xfd, 0x85, 0x4a, 0xf0, 0x03, 0x5d, 0x8c, 0x26, 0x04,
  0xc0, 0x70, 0x43, 0xa0, 0x17, 0x60, 0x30, 0xcb, 0x50, 0x10, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0xa4, 0x41, 0x5f, 0xc0, 0x44, 0x49, 0x10,
  0x7b, 0x31, 0x9a, 0x10, 0x00, 0xb3, 0x04, 0xc5, 0x40, 0x05, 0x20, 0x10,
  0xcc, 0x70, 0x0b, 0xb0, 0xb7, 0x00, 0x7b, 0x0b, 0xb0, 0x17, 0x01, 0x7b,
  0x11, 0xb0, 0x17, 0x01, 0x7b, 0x17, 0xb0, 0x77, 0x01, 0x7b, 0x17, 0xb0,
  0x23, 0x06, 0x0d, 0x00, 0x82, 0x60, 0x60, 0x06, 0xaa, 0xa1, 0x13, 0x2f,
  0xa1, 0x9c, 0x06, 0x6a, 0xf8, 0x84, 0x4f, 0xf8, 0x44, 0x4d, 0x8c, 0x18,
  0x34, 0x00, 0x08, 0x82, 0x81, 0x19, 0xa8, 0x86, 0x4e, 0xbc, 0x84, 0xf2,
  0x17, 0x09, 0x72, 0x18, 0x33, 0x31, 0x62, 0xd0, 0x00, 0x20, 0x08, 0x06,
  0x66, 0xa0, 0x1a, 0x3a, 0xf1, 0x12, 0x8a, 0x5d, 0x14, 0xc4, 0x20, 0xcc,
  0xc4, 0x88, 0x41, 0x03, 0x80, 0x20, 0x18, 0x98, 0x81, 0x6a, 0xe8, 0xc4,
  0x4b, 0x28, 0x7e, 0x11, 0xf8, 0x84, 0x4f, 0xf8, 0x44, 0x4d, 0x8c, 0x18,
  0x1c, 0x00, 0x08, 0x82, 0x01, 0xe7, 0x1a, 0x39, 0xb1, 0x12, 0xa8, 0x31,
  0x9a, 0x10, 0x04, 0xa3, 0x09, 0xc2, 0x30, 0x62, 0xd0, 0x00, 0x20, 0x08,
  0x06, 0x66, 0xd0, 0x1a, 0x3d, 0x31, 0x13, 0x8d, 0x6a, 0x08, 0x61, 0x11,
  0x16, 0x61, 0x81, 0x13, 0x23, 0x06, 0x0d, 0x00, 0x82, 0x60, 0x60, 0x06,
  0xad, 0xd1, 0x13, 0x33, 0xd1, 0x88, 0x46, 0x4b, 0x84, 0x45, 0x58, 0x84,
  0x05, 0x4e, 0x8c, 0x18, 0x34, 0x00, 0x08, 0x82, 0x81, 0x19, 0xb4, 0x46,
  0x4f, 0xcc, 0x44, 0xb3, 0x17, 0x41, 0x58, 0x84, 0x45, 0x58, 0xe0, 0xc4,
  0x2c, 0x81, 0x81, 0xe1, 0x40, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00,
  0x36, 0x1b, 0x60, 0x7c, 0x26, 0x30, 0xd4, 0xbc, 0xc9, 0x06, 0x18, 0x9f,
  0x09, 0x0c, 0x75, 0x6f, 0x46, 0x1e, 0x07, 0x08, 0x07, 0x31, 0xb0, 0x4e,
  0x34, 0x6d, 0x54, 0x51, 0x10, 0xd1, 0xef, 0x6a, 0xef, 0x2f, 0x4d, 0x11,
  0x25, 0x4c, 0x01, 0x55, 0x98, 0x92, 0x86, 0x34, 0x03, 0x71, 0x6d, 0x54,
  0x51, 0x10, 0xd1, 0x3f, 0x11, 0xd7, 0x44, 0x45, 0xc4, 0x1f, 0x01, 0x56,
  0x40, 0x15, 0xc6, 0x57, 0xf8, 0x08, 0x8d, 0xd7, 0x46, 0x57, 0xf8, 0x08,
  0x8d, 0xe3, 0xe6, 0x57, 0xf8, 0x88, 0x8d, 0xdf, 0xe6, 0x1c, 0x50, 0xf8,
  0x08, 0x8d, 0xef, 0x66, 0x57, 0xf8, 0x88, 0x8d, 0xeb, 0xd6, 0x1b, 0xa0,
  0x4c, 0x11, 0xe2, 0xdb, 0x3e, 0xed, 0x23, 0xb4, 0xf9, 0x06, 0x28, 0x53,
  0x84, 0xf8, 0xb6, 0x4f, 0xfb, 0x48, 0x6d, 0xbf, 0x01, 0xca, 0x14, 0x21,
  0xbe, 0xed, 0xd3, 0x3e, 0x62, 0x1b, 0x74, 0x40, 0xe1, 0x23, 0x36, 0xde,
  0xdb, 0x6b, 0x80, 0xf1, 0x99, 0xc0, 0x60, 0xd7, 0xe6, 0x1a, 0x60, 0x7c,
  0x26, 0x30, 0xd8, 0xb6, 0xad, 0x06, 0x18, 0x9f, 0x09, 0x0c, 0x36, 0x6e,
  0xaa, 0x01, 0xc6, 0x67, 0x02, 0x83, 0x9d, 0xdb, 0x69, 0x80, 0xf1, 0x99,
  0xc0, 0x60, 0xef, 0x96, 0x25, 0xf8, 0xb8, 0x99, 0x06, 0x18, 0x9f, 0x09,
  0x0c, 0x36, 0x6f, 0xcd, 0x01, 0x82, 0x4f, 0x1b, 0xd3, 0x57, 0x3a, 0xc0,
  0x90, 0x46, 0x08, 0x83, 0x4c, 0x48, 0x45, 0x48, 0x9c, 0xd3, 0x48, 0x13,
  0xd0, 0x4c, 0xd2, 0x2f, 0x04, 0x54, 0x51, 0x10, 0x91, 0x49, 0x07, 0x14,
  0x3e, 0x42, 0xe7, 0xb4, 0xb5, 0x1d, 0xbe, 0x84, 0x34, 0x0a, 0x6f, 0x1b,
  0x75, 0x40, 0xe1, 0x23, 0x76, 0x6e, 0x93, 0x0a, 0xba, 0x80, 0x9f, 0xa3,
  0x32, 0xba, 0xa7, 0x3a, 0x3a, 0xb8, 0x3a, 0xba, 0x24, 0x37, 0xb2, 0x32,
  0x3c, 0x20, 0xa0, 0xac, 0xa0, 0xa4, 0x24, 0x20, 0x2d, 0x97, 0x32, 0xbc,
  0x34, 0x3a, 0x1b, 0x0d, 0x30, 0x3e, 0x13, 0x18, 0x6e, 0xda, 0x44, 0x03,
  0x8c, 0xcf, 0x04, 0x86, 0xbb, 0xb6, 0xcf, 0x00, 0xe3, 0x33, 0x81, 0xe1,
  0xbe, 0x0d, 0xa9, 0x4b, 0x23, 0x84, 0x41, 0x26, 0xa4, 0x22, 0x36, 0xaa,
  0x28, 0x88, 0xe8, 0x77, 0xb5, 0xf7, 0x97, 0xa6, 0x88, 0x12, 0xa6, 0x80,
  0x2a, 0xcc, 0x33, 0xc0, 0xf8, 0x4c, 0x60, 0xb8, 0x71, 0xdb, 0x0c, 0x30,
  0x3e, 0x13, 0x18, 0x6e, 0xdd, 0x34, 0x03, 0x8c, 0xcf, 0x04, 0x86, 0x7b,
  0xb7, 0xa4, 0x30, 0x68, 0x23, 0xa0, 0x91, 0x0a, 0x27, 0x62, 0x36, 0xaa,
  0x28, 0x88, 0xe8, 0x9f, 0x88, 0x6b, 0xa2, 0x22, 0xe2, 0x97, 0xa6, 0x88,
  0x12, 0xa6, 0x80, 0x2a, 0x48, 0x01, 0x69, 0x10, 0xf0, 0x73, 0x54, 0x46,
  0x97, 0xe4, 0x46, 0x56, 0x86, 0x07, 0x04, 0x94, 0x15, 0xf4, 0x13, 0x64,
  0xf5, 0x43, 0x62, 0x57, 0x36, 0x46, 0xf7, 0x26, 0x07, 0x94, 0x44, 0x02,
  0x23, 0x03, 0x04, 0x94, 0x04, 0xa4, 0xe5, 0x52, 0x86, 0x97, 0x46, 0x37,
  0x63, 0x7d, 0x85, 0x8f, 0xd4, 0xb8, 0x6d, 0x75, 0x85, 0x8f, 0xd4, 0x78,
  0x6e, 0xc3, 0x01, 0xca, 0x14, 0x21, 0x3e, 0xed, 0xd3, 0x3e, 0x42, 0x1b,
  0x71, 0x80, 0x32, 0x45, 0x88, 0x4f, 0xfb, 0xb4, 0x8f, 0xd4, 0x56, 0x1c,
  0xa0, 0x4c, 0x11, 0xe2, 0xd3, 0x3e, 0xed, 0x23, 0xb6, 0x3d, 0x07, 0x14,
  0x3e, 0x52, 0xe3, 0xbc, 0x2d, 0x71, 0xc4, 0x42, 0x30, 0x44, 0x33, 0x6d,
  0x54, 0x51, 0x10, 0xd1, 0x3f, 0x11, 0xd7, 0x44, 0x45, 0xc4, 0x1f, 0x01,
  0x56, 0x40, 0x15, 0x76, 0xc4, 0x99, 0xc4, 0x04, 0x0c, 0xc0, 0x04, 0x6c,
  0x54, 0x51, 0x10, 0xd1, 0xef, 0x6a, 0xef, 0x2f, 0x4d, 0x11, 0x25, 0x4c,
  0x01, 0x55, 0x18, 0x61, 0xc0, 0xe0, 0x23, 0xb4, 0x15, 0x06, 0x0c, 0x3e,
  0x52, 0x9b, 0x61, 0xc0, 0xe0, 0x23, 0xb6, 0x45, 0x07, 0x0c, 0x3e, 0x72,
  0xdb, 0x74, 0x40, 0xe1, 0x23, 0x75, 0x5e, 0x5b, 0x75, 0x40, 0xe1, 0x23,
  0x77, 0x7e, 0x1b, 0x70, 0x80, 0x32, 0x45, 0x88, 0x5f, 0xfb, 0xb4, 0x8f,
  0xd0, 0x16, 0x1c, 0xa0, 0x4c, 0x11, 0xe2, 0xd7, 0x3e, 0xed, 0x23, 0xb5,
  0x09, 0x07, 0x28, 0x53, 0x84, 0xf8, 0xb5, 0x4f, 0xfb, 0x88, 0x6d, 0xbb,
  0x01, 0xc6, 0x67, 0x02, 0x43, 0x6d, 0x9b, 0x6e, 0x80, 0xf1, 0x99, 0xc0,
  0x50, 0xdf, 0x76, 0x1b, 0x60, 0x7c, 0x26, 0x30, 0xd4, 0xb9, 0xd9, 0x06,
  0x18, 0x9f, 0x09, 0x0c, 0xb5, 0x0e, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x5b, 0x06, 0x31, 0x08, 0x56, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
